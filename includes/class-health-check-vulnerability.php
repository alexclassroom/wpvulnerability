<?php
/**
 * Primary class file for the Health Check plugin.
 *
 * @package Health Check
 */

// Make sure the file is not directly accessible.
if ( ! defined( 'ABSPATH' ) ) {
	die( 'We\'re sorry, but you can not directly access this file.' );
}

/**
 * Class HealthCheck
 */
class Health_Check_Vulnerability {

	/**
	 * Notices to show at the head of the admin screen.
	 *
	 * @access public
	 *
	 * @var array
	 */
	public $admin_notices = array();

	/**
	 * HealthCheck constructor.
	 *
	 * @uses Health_Vulnerability::init()
	 *
	 * @return void
	 */
	public function __construct() {
		$this->init();
	}

	/**
	 * Plugin initiation.
	 *
	 * A helper function, called by `HealthCheck::__construct()` to initiate actions, hooks and other features needed.
	 *
	 * @uses add_action()
	 * @uses add_filter()
	 *
	 * @return void
	 */
	public function init() {

		add_filter( 'plugin_action_links', array( $this, 'vulnerability_plugin_action' ), 20, 4 );

		add_action( 'admin_enqueue_scripts', array( $this, 'enqueues' ) );
	}

	/**
	 * Enqueue assets.
	 *
	 * Conditionally enqueue our CSS and JavaScript when viewing plugin related pages in wp-admin.
	 *
	 * @uses wp_enqueue_style()
	 * @uses plugins_url()
	 * @uses wp_enqueue_script()
	 * @uses wp_localize_script()
	 * @uses esc_html__()
	 *
	 * @return void
	 */
	public function enqueues() {
		$screen = get_current_screen();

		wp_enqueue_style(
			'wpvulnerability',
			trailingslashit( WPVULNERABILITY_PLUGIN_URL ) . 'assets/admin.css',
			array(),
			WPVULNERABILITY_PLUGIN_VERSION
		);
	}

	/**
	 * Add a troubleshooting action link to plugins.
	 *
	 * @param $actions Actions.
	 * @param $plugin_file Filename.
	 * @param $plugin_data
	 * @param $context
	 *
	 * @return array
	 */

	/**
	 * Add a troubleshooting action link to plugins
	 *
	 * @param array  $actions Actions of plugin.
	 * @param string $plugin_file Plugin file name.
	 * @param array  $plugin_data Plugin data.
	 * @param string $context Context of plugin.
	 * @return array
	 */
	public function vulnerability_plugin_action( $actions, $plugin_file, $plugin_data, $context ) {
		global $api_wpvulnerability;
		// Don't add anything if this is a Must-Use plugin, we can't touch those.
		if ( 'mustuse' === $context ) {
			return $actions;
		}

		// Set a slug if the plugin lives in the plugins directory root.
		if ( ! stristr( $plugin_file, '/' ) ) {
			$plugin_slug = $plugin_file;
		} else { // Set the slug for plugin inside a folder.
			$plugin_slug = explode( '/', $plugin_file );
			$plugin_slug = $plugin_slug[0];
		}

		$plugin_vuls = $api_wpvulnerability->get_plugin( $plugin_slug, $plugin_data['Version'] );
		if ( is_array( $plugin_vuls ) && ! empty( $plugin_vuls ) ) {
			$msg  = '<span class="blink alert">';
			$msg .= sprintf(
				// translators: %s number vulnerabilities.
				_n( '%s vulnerability', '%s vulnerabilities', count( $plugin_vuls ), 'wpvulnerability' ),
				count( $plugin_vuls )
			);
			$actions['vulnerability'] = $msg . '</span>';
		}

		return $actions;
	}
}
