<?php
/**
 * API Class
 *
 * @package    WordPress
 * @author     David Perez <david@closemarketing.es>
 * @copyright  2022 Closemarketing
 * @version    1.0
 */

defined( 'ABSPATH' ) || exit;

/**
 * API Connector.
 *
 * API connector for Vulnerability.
 *
 * @since 1.0
 */
class API_WPVulnerability {

	/**
	 * Construct of Class
	 */
	public function __construct() {
	}

	public function get( $type, $plugin_slug = '' ) {
		$key = 'wpvulnerability_' . $type;
		if ( ! empty( $plugin_slug ) ) {
			$key .= '_' . $plugin_slug;
		}
		$vulnerability = get_transient( $key );
		if ( ! $vulnerability ) {
			$url = 'https://www.wpvulnerability.net/' . $type . '/';
			if ( ! empty( $plugin_slug ) ) {
				$url .= $plugin_slug . '/';
			}
			$response = wp_remote_get( $url );
			if ( isset( $response['response']['code'] ) && 200 === $response['response']['code'] ) {
				$body = wp_remote_retrieve_body( $response );
				set_transient( $key, $body, HOUR_IN_SECONDS * 24 );
			}
		}
		return json_decode( $vulnerability, true );
	}

	public function get_core( $version ) {
		$response      = $this->get( 'core', $version );
		$vulnerability = array();

		foreach ( $response['data']['vulnerability'] as $v ) {
			$vulnerability[] = array( 'name' => $v['name'], 'description' => $v['description'], 'date' => $v['date'] );
		}

		return $vulnerability;
	}
  
	public function get_plugin( $slug, $version ) {

		$response      = $this->get( 'plugin', $slug );
		$vulnerability = array();

		foreach ( $response['data']['vulnerability'] as $v ) {

			if ( isset( $v['operator']['min_operator'] ) && $v['operator']['min_operator'] && isset( $v['operator']['max_operator'] ) && $v['operator']['max_operator'] ) {
				if ( version_compare( $version, $v['operator']['min_version'], $v['operator']['min_operator'] ) && version_compare( $version, $v['operator']['max_version'], $v['operator']['max_operator'] ) ) {
					$msg = $v['operator']['min_version'] . $v['operator']['min_version'] . ' - ' . $v['operator']['max_operator'] . $v['operator']['max_version'];
					$vulnerability[] = array( 'name' => $v['name'], 'description' => $v['description'], 'date' => $v['date'], 'versions' => $msg, 'unfixed' => $v['operator']['unfixed'], 'closed' => $v['operator']['closed'] );
					unset( $msg );
				} elseif ( version_compare( $version, $v['operator']['max_version'], $v['operator']['max_operator'] ) ) {
					$msg = $v['operator']['max_operator'] . $v['operator']['max_version'];
					$vulnerability[] = array( 'name' => $v['name'], 'description' => $v['description'], 'date' => $v['date'], 'versions' => $msg, 'unfixed' => $v['operator']['unfixed'], 'closed' => $v['operator']['closed'] );
					unset( $msg );
				} elseif ( version_compare( $version, $v['operator']['min_version'], $v['operator']['min_operator'] ) ) {
					$msg = $v['operator']['min_version'] . $v['operator']['min_version'];
					$vulnerability[] = array( 'name' => $v['name'], 'description' => $v['description'], 'date' => $v['date'], 'versions' => $msg, 'unfixed' => $v['operator']['unfixed'], 'closed' => $v['operator']['closed'] );
					unset( $msg );
				}
			}
		}
		return $vulnerability;
	}

	public function get_theme( $slug, $version ) {

		$response      = $this->get( 'theme', $slug );
		$vulnerability = array();

		foreach ( $response['data']['vulnerability'] as $v ) {

			if ( isset( $v['operator']['min_operator'] ) && $v['operator']['min_operator'] && isset( $v['operator']['max_operator'] ) && $v['operator']['max_operator'] ) {

				if ( version_compare( $version, $v['operator']['min_version'], $v['operator']['min_operator'] ) && version_compare( $version, $v['operator']['max_version'], $v['operator']['max_operator'] ) ) {
					$msg = $v['operator']['min_version'] . $v['operator']['min_version'] . ' - ' . $v['operator']['max_operator'] . $v['operator']['max_version'];
					$vulnerability[] = array( 'name' => $v['name'], 'description' => $v['description'], 'date' => $v['date'], 'versions' => $msg, 'unfixed' => $v['operator']['unfixed'], 'closed' => $v['operator']['closed'] );
					unset( $msg );
				} elseif ( version_compare( $version, $v['operator']['max_version'], $v['operator']['max_operator'] ) ) {
					$msg = $v['operator']['max_operator'] . $v['operator']['max_version'];
					$vulnerability[] = array( 'name' => $v['name'], 'description' => $v['description'], 'date' => $v['date'], 'versions' => $msg, 'unfixed' => $v['operator']['unfixed'], 'closed' => $v['operator']['closed'] );
					unset( $msg );
				} elseif ( version_compare( $version, $v['operator']['min_version'], $v['operator']['min_operator'] ) ) {
					$msg = $v['operator']['min_version'] . $v['operator']['min_version'];
					$vulnerability[] = array( 'name' => $v['name'], 'description' => $v['description'], 'date' => $v['date'], 'versions' => $msg, 'unfixed' => $v['operator']['unfixed'], 'closed' => $v['operator']['closed'] );
					unset( $msg );
				}
			}
		}
		return $vulnerability;
	}

}

$api_wpvulnerability = new API_WPVulnerability();
