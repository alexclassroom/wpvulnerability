<?php
/**
 * Primary class file for the Health Check plugin.
 *
 * @package Health Check
 */

// Make sure the file is not directly accessible.
if ( ! defined( 'ABSPATH' ) ) {
	die( 'We\'re sorry, but you can not directly access this file.' );
}

/**
 * Class HealthCheck
 */
class Health_WPVulnerability {

	/**
	 * Construct Class for Health Kit
	 */
	public function __construct() {
		add_filter( 'site_status_tests', array( $this, 'add_vulnerability_tests' ) );
	}

	/**
	 * Add vulnerability tests in Health
	 *
	 * @param array $tests Actual tests.
	 * @return array
	 */
	public function add_vulnerability_tests( $tests ) {
		$tests['direct']['wpvulnerability_core'] = array(
			'label' => __( 'WP Vulnerability Core', 'wpvulnerability' ),
			'test'  => array( $this, 'test_vulnerability_core' ),
		);

		$tests['direct']['wpvulnerability_themes'] = array(
			'label' => __( 'WP Vulnerability Themes', 'wpvulnerability' ),
			'test'  => array( $this, 'test_vulnerability_themes' ),
		);

		$tests['direct']['wpvulnerability_plugins'] = array(
			'label' => __( 'WP Vulnerability Plugins', 'wpvulnerability' ),
			'test'  => array( $this, 'test_vulnerability_plugins' ),
		);

		return $tests;
	}

	/**
	 * Tests for Vulnerability in Core
	 *
	 * @return array
	 */
	public function test_vulnerability_core() {
		$result = array(
			'label'       => __( 'There are no vulnerabilities in WordPress Core.', 'wpvulnerability' ),
			'status'      => 'good',
			'badge'       => array(
				'label' => __( 'Security', 'wpvulnerability' ),
				'color' => 'red',
			),
			'description' => sprintf(
				'<p>%s</p>',
				__( 'You can see the vulnerabilities found in your WordPress installation.', 'wpvulnerability' )
			),
			'actions'     => '',
			'test'        => 'wpvulnerability_core',
		);

		$core_vulnerabilities = wpvulnerability_get_core();
		if ( ! empty( $core_vulnerabilities ) ) {
			$result['status']      = 'critical';
			$result['label']       = __( 'There are vulnerabilities in WordPress Core.', 'wpvulnerability' );
			$result['description'] = sprintf(
				'<p>%1$s</p> %2$s',
				__( 'We have found vulnerabilities in WordPress Core.', 'wpvulnerability' ),
				$this->get_html_vulnerabilities( $core_vulnerabilities )
			);
			$result['actions']    .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( admin_url( 'update-core.php' ) ),
				__( 'Update WordPress Core' )
			);
		}

		return $result;
	}

	/**
	 * Tests for Vulnerability in Themes
	 *
	 * @return array
	 */
	public function test_vulnerability_themes() {
		$result = array(
			'label'       => __( 'There are no vulnerabilities in Themes.', 'wpvulnerability' ),
			'status'      => 'good',
			'badge'       => array(
				'label' => __( 'Security', 'wpvulnerability' ),
				'color' => 'red',
			),
			'description' => sprintf(
				'<p>%s</p>',
				__( 'You can see the vulnerabilities found in your WordPress installation.', 'wpvulnerability' )
			),
			'actions'     => '',
			'test'        => 'wpvulnerability_themes',
		);

		$html_vuln = '';
		$themes    = wp_get_themes();
		foreach ( $themes as $slug => $theme ) {
			$slug                = sanitize_title( $slug );
			$theme_vulnerability = wpvulnerability_get_theme( $slug, $theme->get( 'Version' ) );
			if ( ! empty( $theme_vulnerability ) ) {
				$html_vuln .= '<h3>Theme: ' . $theme->get( 'Name' ) . '</h3>';
				$html_vuln .= $this->get_html_vulnerabilities( $theme_vulnerability );
			}
		}

		if ( ! empty( $html_vuln ) ) {
			$result['status']      = 'critical';
			$result['label']       = __( 'There are vulnerabilities in Themes.', 'wpvulnerability' );
			$result['description'] = sprintf(
				'<p>%1$s</p> %2$s',
				__( 'We have found vulnerabilities in Themes.', 'wpvulnerability' ),
				$html_vuln
			);
			$result['actions']    .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( admin_url( 'update-core.php' ) ),
				__( 'Update Themes' )
			);
		}

		return $result;
	}

	/**
	 * Tests for Vulnerability in Plugins
	 *
	 * @return array
	 */
	public function test_vulnerability_plugins() {
		$result = array(
			'label'       => __( 'There are no vulnerabilities in Plugins.', 'wpvulnerability' ),
			'status'      => 'good',
			'badge'       => array(
				'label' => __( 'Security', 'wpvulnerability' ),
				'color' => 'red',
			),
			'description' => sprintf(
				'<p>%s</p>',
				__( 'You can see the vulnerabilities found in your WordPress installation.', 'wpvulnerability' )
			),
			'actions'     => '',
			'test'        => 'wpvulnerability_plugins',
		);

		$plugins   = get_plugins();
		$html_vuln = '';
		foreach ( $plugins as $key => $plugin ) {
			if ( empty( $plugin['TextDomain'] ) && isset( $plugin['file_path'] ) ) {
				$folder_name = explode( '/', $plugin['file_path'] );
				$slug        = $folder_name[0];
			} else {
				$slug = $plugin['TextDomain'];
			}
			$plugin_vulnerability = wpvulnerability_get_plugin( $slug, $plugin['Version'] );
			if ( ! empty( $plugin_vulnerability ) ) {
				$html_vuln .= '<h3>Plugin: ' . $plugin['Name'] . '</h3>';
				$html_vuln .= $this->get_html_vulnerabilities( $plugin_vulnerability );
			}
		}

		if ( ! empty( $html_vuln ) ) {
			$result['status']      = 'critical';
			$result['label']       = __( 'There are vulnerabilities in Plugins.', 'wpvulnerability' );
			$result['description'] = sprintf(
				'<p>%1$s</p> %2$s',
				__( 'We have found vulnerabilities in Plugins. You cand find below.', 'wpvulnerability' ),
				$html_vuln
			);
			$result['actions']    .= sprintf(
				'<p><a href="%s">%s</a></p>',
				esc_url( admin_url( 'update-core.php' ) ),
				__( 'Update Plugins' )
			);
		}

		return $result;
	}

	/**
	 * Convert vulnerabilities in html
	 *
	 * @param array $vulnerabilities Vulnerabilites.
	 * @return html
	 */
	private function get_html_vulnerabilities( $vulnerabilities ) {
		$html = '<table>';
		foreach ( $vulnerabilities as $vulnerability ) {
			foreach ( $vulnerability['source'] as $source ) {
				$html .= '<tr>';
				$html .= '<td style="background-color:#FAEDE8;padding: 4px 15px 4px 0;"><strong>' . esc_html( $vulnerability['name'] ) . '<br/>' . esc_html( $source['name'] ) . '<br/>' . esc_html( $source['date'] ) . '</strong></td>';
				$html .= '<td style="background-color:#FAEDE8;padding: 4px 15px 4px 0;">' . esc_html( $source['description'] ) . '</td>';
				$html .= '</tr>';
			}
		}
		$html .= '</table>';
		return $html;
	}
}

new Health_WPVulnerability();
