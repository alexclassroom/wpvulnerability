<?php
/**
 * General functions
 *
 * @package WPVulnerability
 * @version 2.0.0
 */
defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

/**
 * Sanitize a version string.
 *
 * @param string $version The version string to sanitize.
 * @return string The sanitized version string.
 */
function wpvulnerability_sanitize_version( $version ) {

	// Remove any leading/trailing whitespace
	// Strip out any non-alphanumeric characters except for hyphens, underscores, and dots
	$version = trim( preg_replace( '/[^a-zA-Z0-9_\-.]+/', '', $version ) );

	return $version;

}

/**
 * Returns a Pretty Operator
 *
 * @param string $version The operator string to prettify.
 * @return string The pretty operator html string.
 */
function wpvulnerability_pretty_operator( $op ) {

  switch( trim( strtolower( $op ) ) ) {
    case 'lt':
      return '&lt;&nbsp;';
      break;
    case 'le':
      return '&le;&nbsp;';
      break;
    case 'gt':
      return '&gt;&nbsp;';
      break;
    case 'ge':
      return '&ge;&nbsp;';
      break;
    case 'eq':
      return '&equals;&nbsp;';
      break;
    case 'ne':
      return '&ne;&nbsp;';
      break;
    default:
      return $op;
      break;
  }

}

/**
 * Returns a Severity
 *
 * @param string $severity The severity string to prettify.
 * @return string The severity string.
 */
function wpvulnerability_severity( $severity ) {

  switch( trim( strtolower( $severity ) ) ) {
    case 'n':
			/* translators: Severity: None */
      return __( 'None', 'wpvulnerability' );
      break;
    case 'l':
			/* translators: Severity: Low */
      return __( 'Low', 'wpvulnerability' );
      break;
    case 'm':
			/* translators: Severity: Medium */
      return __( 'Medium', 'wpvulnerability' );
      break;
    case 'm':
			/* translators: Severity: High */
      return __( 'High', 'wpvulnerability' );
      break;
    case 'c':
			/* translators: Severity: Critical */
      return __( 'Critical', 'wpvulnerability' );
      break;
    default:
      return $severity;
      break;
  }

}

/**
 * Gets vulnerabilities info from API
 *
 * @param string $type Type of query.
 * @param string $slug Slug.
 * @return array
 */
function wpvulnerability_get( $type, $slug = '' ) {

	$args = array(
		'timeout'   => 10000,
		'sslverify' => false,
	);

	switch( trim( strtolower( $type ) ) ) {
		case 'core':
			$type = 'core';
			break;
		case 'plugin':
			$type = 'plugin';
			break;
		case 'theme':
			$type = 'theme';
			break;
		default: 
			wp_die( 'Unknown vulnerability type sent.' );
			break;
	}

	if( 'plugin' == $type || 'theme' == $type ) {

		if( empty( sanitize_title( $slug ) ) ) {
			return false;
		}

	} elseif( $type == 'core' ) {

		if( !wpvulnerability_sanitize_version( $slug ) ) {
			return false;
		}

	}

	$key = 'wpvulnerability_' . $type . '_' . $slug;

	$vulnerability = get_transient( $key );

	if ( empty( $vulnerability ) ) {

		$url = WPVULNERABILITY_API_HOST . $type . '/' . $slug . '/';
		$response = wp_remote_get( $url, $args );

		if ( !is_wp_error( $response ) ) {

			$body = wp_remote_retrieve_body( $response );
			set_transient( $key, $body, HOUR_IN_SECONDS * 12 );

		}

	}

	return json_decode( $vulnerability, true );

}

/**
 * Get vulnerabilities from Core
 *
 * @param string $version Version of core.
 * @return array
 */
function wpvulnerability_get_core( $version = null ) {

	if( !wpvulnerability_sanitize_version( $version ) ) {
		$version = null;
	}

	if ( is_null( $version ) ) {
		$version = get_bloginfo( 'version' );
	}

	$response = wpvulnerability_get( 'core', $version );

	$vulnerability = array();

	if ( empty( $response['data']['vulnerability'] ) ) {
		return false;
	}
	
	foreach ( $response['data']['vulnerability'] as $v ) {

		$vulnerability[] = array(
			'name' => wp_kses( $v['name'], 'strip' ),
			'link' => sanitize_url( $v['link'] ),
			'source' => $v['source'],
			'impact' => $v['impact'],
		);

	}
	return $vulnerability;
}

/**
 * Get vulnerabilities from Plugin
 *
 * @param string $slug Slug of plugin.
 * @param string $version Version of plugin.
 * @return array
 */
function wpvulnerability_get_plugin( $slug, $version ) {

	$slug = sanitize_title( $slug );

	if( !wpvulnerability_sanitize_version( $version ) ) {
		return false;
	}

	$response = wpvulnerability_get( 'plugin', $slug );

	$vulnerability = array();

	if ( empty( $response['data']['vulnerability'] ) ) {
		return false;
	}

	foreach ( $response['data']['vulnerability'] as $v ) {

		if ( isset( $v['operator']['min_operator'] ) && $v['operator']['min_operator'] && isset( $v['operator']['max_operator'] ) && $v['operator']['max_operator'] ) {
			
			if ( version_compare( $version, $v['operator']['min_version'], $v['operator']['min_operator'] ) && version_compare( $version, $v['operator']['max_version'], $v['operator']['max_operator'] ) ) {
				
				$vulnerability[] = array(
					'name' => wp_kses( $v['name'], 'strip' ),
					'description' => wp_kses_post( $v['description'] ),
					'versions' => wp_kses( wpvulnerability_pretty_operator( $v['operator']['min_operator'] ) . $v['operator']['min_version'] . ' - ' . wpvulnerability_pretty_operator( $v['operator']['max_operator'] ) . $v['operator']['max_version'], 'strip' ),
					'version' => wp_kses( $v['operator']['min_version'], 'strip' ),
					'unfixed' => (int)$v['operator']['unfixed'],
					'closed' => (int)$v['operator']['closed'],
					'source' => $v['source'],
					'impact' => $v['impact'],
				);

			}

		} elseif ( isset( $v['operator']['max_operator'] ) && $v['operator']['max_operator'] ) {

			if ( version_compare( $version, $v['operator']['max_version'], $v['operator']['max_operator'] ) ) {

				$vulnerability[] = array(
					'name' => wp_kses( $v['name'], 'strip' ),
					'description' => wp_kses_post( $v['description'] ),
					'versions' => wp_kses( wpvulnerability_pretty_operator( $v['operator']['max_operator'] ) . $v['operator']['max_version'], 'strip' ),
					'version' => wp_kses( $v['operator']['max_version'], 'strip' ),
					'unfixed' => (int)$v['operator']['unfixed'],
					'closed' => (int)$v['operator']['closed'],
					'source' => $v['source'],
					'impact' => $v['impact'],
				);

			}

		} elseif ( isset( $v['operator']['min_operator'] ) && $v['operator']['min_operator'] ) {

			if ( version_compare( $version, $v['operator']['min_version'], $v['operator']['min_operator'] ) ) {

				$vulnerability[] = array(
					'name' => wp_kses( $v['name'], 'strip' ),
					'description' => wp_kses_post( $v['description'] ),
					'versions' => wp_kses( wpvulnerability_pretty_operator( $v['operator']['min_operator'] ) . $v['operator']['min_version'], 'strip' ),
					'version' => wp_kses( $v['operator']['min_version'], 'strip' ),
					'unfixed' => (int)$v['operator']['unfixed'],
					'closed' => (int)$v['operator']['closed'],
					'source' => $v['source'],
					'impact' => $v['impact'],
				);

			}

		}

	}

	return $vulnerability;

}

/**
 * Get vulnerabilities from Theme
 *
 * @param string $slug Slug of theme.
 * @param string $version Version of theme.
 * @return array
 */
function wpvulnerability_get_theme( $slug, $version ) {

	$slug = sanitize_title( $slug );

	if( !wpvulnerability_sanitize_version( $version ) ) {
		return false;
	}

	$response = wpvulnerability_get( 'theme', $slug );

	$vulnerability = array();

	if ( empty( $response['data']['vulnerability'] ) ) {
		return false;
	}

	foreach ( $response['data']['vulnerability'] as $v ) {

		if ( isset( $v['operator']['min_operator'] ) && $v['operator']['min_operator'] && isset( $v['operator']['max_operator'] ) && $v['operator']['max_operator'] ) {

			if ( version_compare( $version, $v['operator']['min_version'], $v['operator']['min_operator'] ) && version_compare( $version, $v['operator']['max_version'], $v['operator']['max_operator'] ) ) {

				$vulnerability[] = array(
					'name' => wp_kses( $v['name'], 'strip' ),
					'description' => wp_kses_post( $v['description'] ),
					'versions' => wp_kses( wpvulnerability_pretty_operator( $v['operator']['min_version'] ) . $v['operator']['min_version'] . ' - ' . wpvulnerability_pretty_operator( $v['operator']['max_operator'] ) . $v['operator']['max_version'], 'strip' ),
					'version' => wp_kses( $v['operator']['min_version'], 'strip' ),
					'unfixed' => (int)$v['operator']['unfixed'],
					'closed' => (int)$v['operator']['closed'],
					'source' => $v['source'],
					'impact' => $v['impact'],
				);

			}

		} elseif ( isset( $v['operator']['max_operator'] ) && $v['operator']['max_operator'] ) {

			if ( version_compare( $version, $v['operator']['max_version'], $v['operator']['max_operator'] ) ) {

				$vulnerability[] = array(
					'name' => wp_kses( $v['name'], 'strip' ),
					'description' => wp_kses_post( $v['description'] ),
					'versions' => wp_kses( wpvulnerability_pretty_operator( $v['operator']['max_operator'] ) . $v['operator']['max_version'], 'strip' ),
					'version' => wp_kses( $v['operator']['max_version'], 'strip' ),
					'unfixed' => (int)$v['operator']['unfixed'],
					'closed' => (int)$v['operator']['closed'],
					'source' => $v['source'],
					'impact' => $v['impact'],
				);

			}

		} elseif ( isset( $v['operator']['min_operator'] ) && $v['operator']['min_operator'] ) {

			if ( version_compare( $version, $v['operator']['min_version'], $v['operator']['min_operator'] ) ) {

				$vulnerability[] = array(
					'name' => wp_kses( $v['name'], 'strip' ),
					'description' => wp_kses_post( $v['description'] ),
					'versions' => wp_kses( wpvulnerability_pretty_operator( $v['operator']['min_version'] ) . $v['operator']['min_version'], 'strip' ),
					'version' => wp_kses( $v['operator']['min_version'], 'strip' ),
					'unfixed' => (int)$v['operator']['unfixed'],
					'closed' => (int)$v['operator']['closed'],
					'source' => $v['source'],
					'impact' => $v['impact'],
				);

			}

		}

	}

	return $vulnerability;

}

/**
 * Get statistics
 *
 * @return array
 */
function wpvulnerability_get_statistics() {

	$key = 'wpvulnerability_stats';

	$vulnerability = get_transient( $key );

	if ( empty( $vulnerability ) ) {

		$url = WPVULNERABILITY_API_HOST;
		$response = wp_remote_get( $url );

		if ( !is_wp_error( $response ) ) {

			$body = wp_remote_retrieve_body( $response );
			set_transient( $key, $body, HOUR_IN_SECONDS * 12 );

		}

	}

	$response = json_decode( $vulnerability, true );

	if ( ! isset( $response['stats'] ) ) {
		return false;
	}

	return array(
		'core' => array(
			'versions' => (int)$response['stats']['products']['core']
		),
		'plugins' => array(
			'products' => (int)$response['stats']['products']['plugins'],
			'vulnerabilities' => (int)$response['stats']['plugins']
		),
		'themes' => array(
			'products' => (int)$response['stats']['products']['themes'],
			'vulnerabilities' => (int)$response['stats']['themes']
		),
		'updated' => array(
			'unixepoch' => (int)$response['updated'],
			'datetime'  => gmdate( 'Y-m-d H:i:s', (int)$response['updated'] ),
			'iso8601'   => gmdate( 'c', (int)$response['updated'] ),
			'rfc2822'   => gmdate( 'r', (int)$response['updated'] ),
		)
	);

}
