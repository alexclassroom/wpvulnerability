<?php
/**
 * Core functions
 *
 * @package WPVulnerability
 * @version 2.0.0
 */
defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

/**
 * Notices to show at the head of the admin screen.
 *
 */

//$wpvulnerability_admin_notices = array();

/**
 * Set Text Domain
 * sets the text domain to the TextDomain key if it is not set
 *
 * @param  array $core core data.
 * @return array updated core
 */

/*
function wpvulnerability_get_textdomain( $core ) {

	if ( isset( $core['file_path'] ) ) {
		$folder_name = explode( '/', $core['file_path'] );
		$core['TextDomain'] = wp_kses( $folder_name[0], 'strip' );
	}

	return $core;
}
*/


/**
 * Get Cached core Vulnerabilities
 * pulls installed cores, compares version to cached vulnerabilities, adds vulnerable key to core.
 *
 * @param array  $core core name.
 * @param string $file_path core file path.
 * @return array updated core array.
 */

/*
function get_cached_core_vulnerabilities( $core, $file_path ) {
	global $installed_cores;

	if ( ! is_array( $installed_cores ) ) {

		if ( ! function_exists( 'get_cores' ) ) {
			require_once ABSPATH . 'wp-admin/includes/core.php';
		}
		$installed_cores = get_cores();

	}

	$core = wpvulnerability_get_textdomain( $core );

	if ( isset( $installed_cores[ $file_path ]['Version'] ) ) {

		$core['Version'] = wp_kses( $installed_cores[ $file_path ]['Version'], 'strip' );
		$core['vulnerable'] = 0;

		if ( ! empty( $core['vulnerabilities'] ) ) {
			$core['vulnerable'] = 1;
		}

	}

	$core['file_path'] = $file_path;

	return $core;

}
*/

/**
 * After Row Text
 * callback function for adding vulnerability notice under vulnerable cores
 *
 * @param  string $core_file main core folder/file_name.
 * @param  array  $core_data core data.
 * @param  array  $status Status.
 * @return void
 */

function wpvulnerability_core_info_after( ) {

	$core_vulnerabilities = json_decode( get_option( 'wpvulnerability-core' ), true );

	$message = sprintf(
		/* translators: 1: core version */
		__( 'WordPress %1$s has a known vulnerability that may be affecting this version.', 'wpvulnerability' ),
		get_bloginfo( 'version' )
	);

	$information = '<p class="text-red"><img src="' . esc_url( WPVULNERABILITY_PLUGIN_URL ) . 'assets/logo16.png" style="height: 16px; vertical-align: text-top; width: 16px;" alt="" title="WPVulnerability"> <strong>' . $message . '</strong></p>';

	$information .= '<table class="wp-list-table widefat wpvulnerability">';

	/*
	echo '<pre>';
	print_r($core_vulnerabilities);
	echo '</pre>';
	exit;
	*/

	foreach ( $core_vulnerabilities as $vulnerability ) {

		$what = array();
		if( isset( $vulnerability['impact']['cwe'] ) ) {
			foreach( $vulnerability['impact']['cwe'] as $vulnerability_cwe ) {
				$what[] = '<div><b>' . wp_kses( $vulnerability_cwe['name'], 'strip' ) . '</b></div><div><i>' . wp_kses_post( $vulnerability_cwe['description'] ) . '</i></div>';
			}
		}

		$sources = array();
		if( isset( $vulnerability['source'] ) ) {
			foreach( $vulnerability['source'] as $vulnerability_source ) {
				$sources[] = '<a href="' . sanitize_url( $vulnerability_source['link'], 'strip') . '" target="_blank" rel="external nofollow noopener noreferrer">[+]</a>&nbsp;' . wp_kses( $vulnerability_source['name'], 'strip' );
			}
		}
		if( count( $sources ) ) {
			$source = '<div style="padding-bottom: 5px;">' . implode( '<br>', $sources ) . '</div>';
		}

		$score = null;
		if( isset( $vulnerability['impact']['cvss']['score'] ) ) {
			$score = number_format( (float) $vulnerability['impact']['cvss']['score'], 1, '.', '' );
		}
		$severity = null;
		if( isset( $vulnerability['impact']['cvss']['severity'] ) ) {
			$severity = wpvulnerability_severity( $vulnerability['impact']['cvss']['severity'] );
		}
		$exploitable = null;
		if( isset( $vulnerability['impact']['cvss']['exploitable'] ) ) {
			$exploitable = number_format( (float) $vulnerability['impact']['cvss']['exploitable'], 1, '.', '' );
		}

		$information .= '<tr>';
		$information .= '<td style="max-width: 256px; min-width: 96px;">WordPress <b>' . wp_kses( $vulnerability['name'], 'strip' ) . '</b></td>';
		$information .= '<td>';
		if( count( $what ) ) {
			$information .= '<div style="padding-bottom: 5px;">';
			foreach( $what as $w ) {
				$information .= $w;
			}
			$information .= '</div>';
		}
		if( !is_null( $score ) || !is_null( $severity ) || !is_null( $exploitable ) ) {
			$information .= '<div style="padding-bottom: 5px;">';
			if( !is_null( $score ) ) {
				$information .= '<div>' . __( 'Global score: ', 'wpvulnerability' ) . $score . ' / 10</div>';
			}
			if( !is_null( $severity ) ) {
				$information .= '<div>' . __( 'Severity: ', 'wpvulnerability' ) . $severity . '</div>';
			}
			if( !is_null( $exploitable ) ) {
				$information .= '<div>' . __( 'Exploitability: ', 'wpvulnerability' ) . $exploitable . ' / 10</div>';
			}
			$information .= '</div>';
		}
		$information .= wp_kses( $source, 'post' );
		$information .= '</td>';
		$information .= '</tr>';

	}

	$information .= '</table>';

	echo $information; // phpcs:ignore
}

/**
 * Get Fresh core Vulnerabilities
 * pull vulnerabilities through API, compare version to vulnerabilities, add is_know_vulnerable key
 *
 * @param  array  $core_data core data.
 * @param  string $file_path core file path.
 * @return array  updated core
 */
function get_fresh_core_vulnerabilities( ) {

	$version = wpvulnerability_sanitize_version( get_bloginfo( 'version' ) );

	$response = wpvulnerability_get( 'core', $version );

	$core_data = array();

	if ( empty( $response['data']['vulnerability'] ) ) {
		return false;
	}

	foreach ( $response['data']['vulnerability'] as $v ) {

		$core_data[] = array(
			'name' => wp_kses( $v['name'], 'strip' ),
			'source' => $v['source'],
			'impact' => $v['impact'],
		);

	}
	return $core_data;

}

/**
 * Get Installed cores
 * gets the installed cores, checks for vulnerabilities in them, caches the data, sends email if vulnerabilities detected
 *
 * @return array
 */

function wpvulnerability_core_get_installed() {

	$core = get_fresh_core_vulnerabilities( );

	update_option( 'wpvulnerability-core', wp_json_encode( $core ) );

	return wp_json_encode( $core );

}

/**
 * Get Installed cores cache
 *
 * @return array
 */
 
function wpvulnerability_core_get_vulnerabilities( ) {

	$core_data_cache = json_decode( get_option( 'wpvulnerability-core-cache' ) );
	$core_data = json_decode( get_option( 'wpvulnerability-core' ), true );

	if( $core_data_cache < time() || empty( $core_data ) ) {

		$core_data = json_decode( wpvulnerability_core_get_installed( ), true );

		update_option( 'wpvulnerability-core-cache', wp_json_encode( number_format( time() + ( 3600 * WPVULNERABILITY_CACHE_HOURS ), 0, '.', '' ) ) );

	}

	return $core_data;

}

/**
 * Get Installed cores cache
 *
 * @return array
 */
function wpvulnerability_core_get_vulnerabilities_clean( ) {

	wpvulnerability_core_get_installed( );

}


/**
 * Admin Head
 * gets installed cores cache, adds after row text and notices based on the results for the core page
 *
 * @return void
 */
function wpvulnerability_core_page() {
	global $pagenow;

	if( 'update-core.php' == $pagenow ) {

		$core = wpvulnerability_core_get_vulnerabilities();
		
		if( is_array( $core ) && count( $core ) ) {

			add_action( 'after_core_auto_updates_settings', 'wpvulnerability_core_info_after' );

		}

	}
}
add_action( 'admin_head', 'wpvulnerability_core_page' );


/*
add_action( 'wpvulnerability_pull_db_data_event', 'get_installed_cores' );
//add_action( 'activated_core', 'wpvulnerability_core_get_vulnerabilities_clean', 10, 2 ); // NO tiene mucho sentido
*/
add_action( 'upgrader_process_complete', 'wpvulnerability_core_get_vulnerabilities_clean' , 10, 2 );
