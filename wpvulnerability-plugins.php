<?php
/**
 * Plugin functions
 *
 * @package WPVulnerability
 * @version 2.0.0
 */
defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

/**
 * Notices to show at the head of the admin screen.
 *
 */

//$wpvulnerability_admin_notices = array();

/**
 * Set Text Domain
 * sets the text domain to the TextDomain key if it is not set
 *
 * @param  array $plugin Plugin data.
 * @return array updated plugin
 */

/*
function wpvulnerability_get_textdomain( $plugin ) {

	if ( isset( $plugin['file_path'] ) ) {
		$folder_name = explode( '/', $plugin['file_path'] );
		$plugin['TextDomain'] = wp_kses( $folder_name[0], 'strip' );
	}

	return $plugin;
}
*/


/**
 * Get Cached Plugin Vulnerabilities
 * pulls installed plugins, compares version to cached vulnerabilities, adds vulnerable key to plugin.
 *
 * @param array  $plugin Plugin name.
 * @param string $file_path plugin file path.
 * @return array updated plugin array.
 */

/*
function get_cached_plugin_vulnerabilities( $plugin, $file_path ) {
	global $installed_plugins;

	if ( ! is_array( $installed_plugins ) ) {

		if ( ! function_exists( 'get_plugins' ) ) {
			require_once ABSPATH . 'wp-admin/includes/plugin.php';
		}
		$installed_plugins = get_plugins();

	}

	$plugin = wpvulnerability_get_textdomain( $plugin );

	if ( isset( $installed_plugins[ $file_path ]['Version'] ) ) {

		$plugin['Version'] = wp_kses( $installed_plugins[ $file_path ]['Version'], 'strip' );
		$plugin['vulnerable'] = 0;

		if ( ! empty( $plugin['vulnerabilities'] ) ) {
			$plugin['vulnerable'] = 1;
		}

	}

	$plugin['file_path'] = $file_path;

	return $plugin;

}
*/

/**
 * After Row Text
 * callback function for adding vulnerability notice under vulnerable plugins
 *
 * @param  string $plugin_file main plugin folder/file_name.
 * @param  array  $plugin_data Plugin data.
 * @param  array  $status Status.
 * @return void
 */

function wpvulnerability_plugin_info_after( $plugin_file, $plugin_data, $status ) {

	$plugin_vulnerabilities = json_decode( get_option( 'wpvulnerability-plugins' ), true );
	
	/*
	echo '<pre>';
	print_r($plugin_vulnerabilities);
	echo '</pre>';
	exit;
	*/

	$tr_class = '';
	if ( is_plugin_active( $plugin_file ) ) {
		$tr_class .= 'active';
	}

	$message = sprintf(
		/* translators: 1: plugin name */
		__( '%1$s has a known vulnerability that may be affecting this version.', 'wpvulnerability' ),
		wp_kses( $plugin_data['Name'], 'strip' )
	);

	$information  = '<tr class="wpvulnerability ' . $tr_class . '">';
	$information .= '<td colspan="4">';
	$information .= '<p class="text-red"><img src="' . esc_url( WPVULNERABILITY_PLUGIN_URL ) . 'assets/logo16.png" style="height: 16px; vertical-align: text-top; width: 16px;" alt="" title="WPVulnerability"> <strong>' . $message . '</strong>';
	$information .= '</p>';
	$information .= '<table>';

	$vulnerabilities = $plugin_vulnerabilities[ $plugin_file ]['vulnerabilities'];

	/*
	echo '<pre>';
	print_r($vulnerabilities);
	echo '</pre>';
	exit;
	*/

	foreach ( $vulnerabilities as $vulnerability ) {

		$what = array();
		if( isset( $vulnerability['impact']['cwe'] ) ) {
			foreach( $vulnerability['impact']['cwe'] as $vulnerability_cwe ) {
				$what[] = '<div><b>' . wp_kses( $vulnerability_cwe['name'], 'strip' ) . '</b></div><div><i>' . wp_kses_post( $vulnerability_cwe['description'] ) . '</i></div>';
			}
		}

		$sources = array();
		if( isset( $vulnerability['source'] ) ) {
			foreach( $vulnerability['source'] as $vulnerability_source ) {
				$sources[] = '<a href="' . sanitize_url( $vulnerability_source['link'], 'strip') . '" target="_blank" rel="external nofollow noopener noreferrer">[+]</a>&nbsp;' . wp_kses( $vulnerability_source['name'], 'strip' );
			}
		}
		if( count( $sources ) ) {
			$source = '<div style="padding-bottom: 5px;">' . implode( '<br>', $sources ) . '</div>';
		}

		$score = null;
		if( isset( $vulnerability['impact']['cvss']['score'] ) ) {
			$score = number_format( (float) $vulnerability['impact']['cvss']['score'], 1, '.', '' );
		}
		$severity = null;
		if( isset( $vulnerability['impact']['cvss']['severity'] ) ) {
			$severity = wpvulnerability_severity( $vulnerability['impact']['cvss']['severity'] );
		}
		$exploitable = null;
		if( isset( $vulnerability['impact']['cvss']['exploitable'] ) ) {
			$exploitable = number_format( (float) $vulnerability['impact']['cvss']['exploitable'], 1, '.', '' );
		}

		$information .= '<tr>';
		$information .= '<td style="max-width: 256px; min-width: 96px;"><b>' . wp_kses( $vulnerability['versions'], 'strip' ) . '</b></td>';
		$information .= '<td>';
		if( (int)$vulnerability['closed'] || (int)$vulnerability['unfixed'] ) {
			$information .= '<div style="padding-bottom: 5px;">';
			if( (int)$vulnerability['closed'] ) {
				$information .= '<div class="text-red">' . __( 'This plugin is closed. Please replace it with another.', 'wpvulnerability' ) . '</div>';
			}
			if( (int)$vulnerability['unfixed'] ) {
				$information .= '<div class="text-red">' . __( 'This vulnerability appears to be unpatched. Stay tuned for upcoming plugin updates.', 'wpvulnerability' ) . '</div>';
			}
			$information .= '</div>';
		}
		if( count( $what ) ) {
			$information .= '<div style="padding-bottom: 5px;">';
			foreach( $what as $w ) {
				$information .= $w;
			}
			$information .= '</div>';
		}
		if( !is_null( $score ) || !is_null( $severity ) || !is_null( $exploitable ) ) {
			$information .= '<div style="padding-bottom: 5px;">';
			if( !is_null( $score ) ) {
				$information .= '<div>' . __( 'Global score: ', 'wpvulnerability' ) . $score . ' / 10</div>';
			}
			if( !is_null( $severity ) ) {
				$information .= '<div>' . __( 'Severity: ', 'wpvulnerability' ) . $severity . '</div>';
			}
			if( !is_null( $exploitable ) ) {
				$information .= '<div>' . __( 'Exploitability: ', 'wpvulnerability' ) . $exploitable . ' / 10</div>';
			}
			$information .= '</div>';
		}
		$information .= wp_kses( $source, 'post' );
		$information .= '</td>';
		$information .= '</tr>';

	}

	$information .= '</table>';
	$information .= '</td>';
	$information .= '</tr>';

	echo $information; // phpcs:ignore
}

/**
 * Get Fresh Plugin Vulnerabilities
 * pull vulnerabilities through API, compare version to vulnerabilities, add is_know_vulnerable key
 *
 * @param  array  $plugin_data Plugin data.
 * @param  string $file_path plugin file path.
 * @return array  updated plugin
 */
function get_fresh_plugin_vulnerabilities( $plugin_data, $file_path ) {

	if( empty( $plugin_data['TextDomain'] ) ) {
		
		$folder_name = explode( '/', $file_path );
		
		if( isset( $folder_name[0] ) ) {
			$plugin_data['TextDomain'] = wp_kses( $folder_name[0], 'strip' );
		}

	}

	$plugin_slug = wp_kses( $plugin_data['TextDomain'], 'strip' );
	$plugin_version = wp_kses( $plugin_data['Version'], 'strip' );
	$plugin_data['vulnerabilities'] = null;
	$plugin_data['vulnerable'] = 0;

	if( $plugin_slug ) {

		$plugin_api_response = wpvulnerability_get_plugin( $plugin_slug, $plugin_version );

		if ( !empty( $plugin_api_response ) ) {

			$plugin_data['vulnerabilities'] = $plugin_api_response;
			$plugin_data['vulnerable'] = 1;

		}

	}

	return $plugin_data;
}



/**
 * Get Installed Plugins
 * gets the installed plugins, checks for vulnerabilities in them, caches the data, sends email if vulnerabilities detected
 *
 * @return array
 */

function wpvulnerability_plugin_get_installed() {

	if ( ! function_exists( 'get_plugins' ) ) {
		require_once ABSPATH . 'wp-admin/includes/plugin.php';
	}

	$plugins = get_plugins();

	foreach ( $plugins as $file_path => $plugin_data ) {

		$plugins[$file_path] = get_fresh_plugin_vulnerabilities( $plugin_data, $file_path );

	}

	update_option( 'wpvulnerability-plugins', wp_json_encode( $plugins ) );

	return wp_json_encode( $plugins );
}


/**
 * Get Installed plugins cache
 *
 * @return array
 */
 
function wpvulnerability_plugin_get_vulnerabilities( ) {

	$plugin_data_cache = json_decode( get_option( 'wpvulnerability-plugins-cache' ) );
	$plugin_data = json_decode( get_option( 'wpvulnerability-plugins' ), true );

	if( $plugin_data_cache < time() || empty( $plugin_data ) ) {

		$plugin_data = json_decode( wpvulnerability_plugin_get_installed( ), true );

		update_option( 'wpvulnerability-plugins-cache', wp_json_encode( number_format( time() + ( 3600 * WPVULNERABILITY_CACHE_HOURS ), 0, '.', '' ) ) );

	}

	return $plugin_data;

}

/**
 * Get Installed plugins cache
 *
 * @return array
 */
function wpvulnerability_plugin_get_vulnerabilities_clean( ) {

	wpvulnerability_plugin_get_installed( );

}


/**
 * Admin Head
 * gets installed plugins cache, adds after row text and notices based on the results for the plugin page
 *
 * @return void
 */
function wpvulnerability_plugin_page() {
	global $pagenow;
	if( 'plugins.php' == $pagenow ) {

		$plugins = wpvulnerability_plugin_get_vulnerabilities();

		foreach ( $plugins as $file_path => $plugin_data ) {

			if ( isset( $plugin_data['vulnerable'] ) && 1 === $plugin_data['vulnerable'] ) {

				add_action( 'after_plugin_row_' . $file_path, 'wpvulnerability_plugin_info_after', 10, 3 );

			}

		}

	}
}
add_action( 'admin_head', 'wpvulnerability_plugin_page' );


/*
add_action( 'wpvulnerability_pull_db_data_event', 'get_installed_plugins' );
//add_action( 'activated_plugin', 'wpvulnerability_plugin_get_vulnerabilities_clean', 10, 2 ); // NO tiene mucho sentido
*/
add_action( 'upgrader_process_complete', 'wpvulnerability_plugin_get_vulnerabilities_clean' , 10, 2 );
