<?php
/**
 * Plugin functions
 *
 * @package WPVulnerability
 * @version 2.0.0
 */
defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

/**
 * Notices to show at the head of the admin screen.
 *
 */

//$wpvulnerability_admin_notices = array();

/**
 * Set Text Domain
 * sets the text domain to the TextDomain key if it is not set
 *
 * @param  array $plugin Plugin data.
 * @return array updated plugin
 */

/*
function wpvulnerability_get_textdomain( $plugin ) {

	if ( isset( $plugin['file_path'] ) ) {
		$folder_name = explode( '/', $plugin['file_path'] );
		$plugin['TextDomain'] = wp_kses( $folder_name[0], 'strip' );
	}

	return $plugin;
}
*/


/**
 * Get Cached Plugin Vulnerabilities
 * pulls installed plugins, compares version to cached vulnerabilities, adds vulnerable key to plugin.
 *
 * @param array  $plugin Plugin name.
 * @param string $file_path plugin file path.
 * @return array updated plugin array.
 */

/*
function get_cached_plugin_vulnerabilities( $plugin, $file_path ) {
	global $installed_plugins;

	if ( ! is_array( $installed_plugins ) ) {

		if ( ! function_exists( 'get_plugins' ) ) {
			require_once ABSPATH . 'wp-admin/includes/plugin.php';
		}
		$installed_plugins = get_plugins();

	}

	$plugin = wpvulnerability_get_textdomain( $plugin );

	if ( isset( $installed_plugins[ $file_path ]['Version'] ) ) {

		$plugin['Version'] = wp_kses( $installed_plugins[ $file_path ]['Version'], 'strip' );
		$plugin['vulnerable'] = 0;

		if ( ! empty( $plugin['vulnerabilities'] ) ) {
			$plugin['vulnerable'] = 1;
		}

	}

	$plugin['file_path'] = $file_path;

	return $plugin;

}
*/

/**
 * Get Installed Plugins
 * gets the installed plugins, checks for vulnerabilities in them, caches the data, sends email if vulnerabilities detected
 *
 * @return array
 */

function get_installed_plugins() {

	if ( ! function_exists( 'get_plugins' ) ) {
		require_once ABSPATH . 'wp-admin/includes/plugin.php';
	}

	$plugins = get_plugins();
	$vuln_plugins = array();

	foreach ( $plugins as $key => $plugin ) {

		$plugin = get_fresh_plugin_vulnerabilities( $plugin, $key );
		$plugins[$key] = $plugin;

		if ( isset( $plugin['vulnerable'] ) && 1 === $plugin['vulnerable'] ) {

			$vuln_plugins[] = wp_kses( $plugin['Name'], 'strip' );

		}

	}

	update_option( 'wpvulnerability-data', wp_json_encode( $plugins ) );

	return $plugins;
}





/**
 * Get Installed plugins cache
 *
 * @return array
 */
 
/*
public function wpvulnerability_get_installed_plugins_cache() {

	$plugin_data = json_decode( get_option( 'wpvulnerability-data' ) );

	if ( ! empty( $plugin_data ) ) {

		if ( ! function_exists( 'get_plugins' ) ) {
			require_once ABSPATH . 'wp-admin/includes/plugin.php';
		}

		$plugins = json_decode( get_option( 'wpvulnerability-data' ), true );

		foreach ( $plugins as $key => $plugin ) {
			$plugin = $this->get_cached_plugin_vulnerabilities( $plugin, $key );
			$plugins[$key] = $plugin;
		}

		return $plugins;

	} else {

		$this->get_installed_plugins();

	}

}
*/



/**
 * After Row Text
 * callback function for adding vulnerability notice under vulnerable plugins
 *
 * @param  string $plugin_file main plugin folder/file_name.
 * @param  array  $plugin_data Plugin data.
 * @param  array  $status Status.
 * @return void
 */

/*
public function after_row_text( $plugin_file, $plugin_data, $status ) {

	global $wpvulnerability_data;

	$tr_class = '';
	if ( is_plugin_active( $plugin_data['plugin'] ) ) {
		$tr_class .= 'active';
	}

	if ( ! is_array( $wpvulnerability_data ) ) {
		$wpvulnerability_data = json_decode( get_option( 'wpvulnerability-data' ), true );
	}

	$message = sprintf(
*/
		/* translators: 1: plugin name */
/*
		__( '%1$s has a known vulnerability that may be affecting this version.', 'wpvulnerability' ),
		wp_kses( $plugin_data['Name'], 'strip' )
	);

	$string  = '<tr class="wpvulnerability ' . $tr_class . '">';
	$string .= '<td colspan="4">';
	$string .= '<p class="text-red"><strong>' . $message . '</strong>';
	$string .= '</p>';
	$string .= '<table>';

	$vulnerabilities = $this->get_cached_plugin_vulnerabilities( $wpvulnerability_data[ $plugin_file ], $plugin_file );

	foreach ( $vulnerabilities['vulnerabilities'] as $vulnerability ) {

		$what = array();
		if( isset( $vulnerability['impact']['cwe'] ) ) {
			foreach( $vulnerability['impact']['cwe'] as $vulnerability_cwe ) {
				$what[] = '<div><b>' . wp_kses( $vulnerability_cwe['name'], 'strip' ) . '</b></div><div><i>' . wp_kses_post( $vulnerability_cwe['description'] ) . '</i></div>';
			}
		}

		$sources = array();
		if( isset( $vulnerability['source'] ) ) {
			foreach( $vulnerability['source'] as $vulnerability_source ) {
				$sources[] = '<a href="' . sanitize_url( $vulnerability_source['link'], 'strip') . '" target="_blank">[+]</a>&nbsp;' . wp_kses( $vulnerability_source['name'], 'strip' );
			}
		}
		if( count( $sources ) ) {
			$source = '<div style="padding-bottom: 5px;">' . implode( '<br>', $sources ) . '</div>';
		}

		$score = null;
		if( isset( $vulnerability['impact']['cvss']['score'] ) ) {
			$score = number_format( (float) $vulnerability['impact']['cvss']['score'], 1, '.', '' );
		}
		$severity = null;
		if( isset( $vulnerability['impact']['cvss']['severity'] ) ) {
			$severity = wpvulnerability_severity( $vulnerability['impact']['cvss']['severity'] );
		}
		$exploitable = null;
		if( isset( $vulnerability['impact']['cvss']['exploitable'] ) ) {
			$exploitable = number_format( (float) $vulnerability['impact']['cvss']['exploitable'], 1, '.', '' );
		}

		$string .= '<tr>';
		$string .= '<td style="max-width: 256px;"><b>' . wp_kses( $vulnerability['name'], 'strip' ) . '</b></td>';
		$string .= '<td>';
		if( (int)$vulnerability['closed'] || (int)$vulnerability['unfixed'] ) {
			$string .= '<div style="padding-bottom: 5px;">';
			if( (int)$vulnerability['closed'] ) {
				$string .= '<div class="text-red">' . __( 'This plugin is closed. Please replace it with another.', 'wpvulnerability' ) . '</div>';
			}
			if( (int)$vulnerability['unfixed'] ) {
				$string .= '<div class="text-red">' . __( 'This vulnerability appears to be unpatched. Stay tuned for upcoming plugin updates.', 'wpvulnerability' ) . '</div>';
			}
			$string .= '</div>';
		}
		if( count( $what ) ) {
			$string .= '<div style="padding-bottom: 5px;">';
			foreach( $what as $w ) {
				$string .= $w;
			}
			$string .= '</div>';
		}
		if( !is_null( $score ) || !is_null( $severity ) || !is_null( $exploitable ) ) {
			$string .= '<div style="padding-bottom: 5px;">';
			if( !is_null( $score ) ) {
				$string .= '<div>' . __( 'Global score: ', 'wpvulnerability' ) . $score . ' / 10</div>';
			}
			if( !is_null( $severity ) ) {
				$string .= '<div>' . __( 'Severity: ', 'wpvulnerability' ) . $severity . '</div>';
			}
			if( !is_null( $exploitable ) ) {
				$string .= '<div>' . __( 'Exploitability: ', 'wpvulnerability' ) . $exploitable . ' / 10</div>';
			}
			$string .= '</div>';
		}
		$string .= wp_kses( $source, 'post' );
		$string .= '</td>';
		$string .= '</tr>';
	}

	$string .= '</table>';
	$string .= '</td>';
	$string .= '</tr>';

	echo $string; // phpcs:ignore
}
*/


/*
add_action( 'wpvulnerability_pull_db_data_event', 'get_installed_plugins' );

add_action( 'activated_plugin', 'get_installed_plugins', 10, 2 );
add_action( 'upgrader_process_complete', 'get_installed_plugins' , 10, 2 );
*/




