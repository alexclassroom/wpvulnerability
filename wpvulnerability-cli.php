<?php
/**
 * CLI functions
 *
 * @package WPVulnerability
 *
 * @version 2.0.0
 */
defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

/**
 * Registers a WP-CLI command for WPVulnerability plugin.
 *
 * @since 2.0.0
 *
 * @return void
 */
if( defined( 'WP_CLI' ) && WP_CLI ) {
	/**
	 * Adds a WP-CLI command to show the list of vulnerabilities detected in your site.
	 *
	 * EXAMPLES
	 *
	 *  - wp wpvulnerability core
	 *  - wp wpvulnerability plugins
	 *  - wp wpvulnerability themes
	 *
	 * @param object $args Arguments passed from the command line.
	 *
	 * @return void
	 */
	WP_CLI::add_command(
		'wpvulnerability',
		'cli_command',
		array(
			'shortdesc' => 'Show the list of vulnerabilities detected in your site.',
			'synopsis'  => array(
				array(
					'type'        => 'positional',
					'name'        => 'subcommand',
					'description' => 'subcommand [core|plugins|themes].',
					'optional'    => false,
					'repeating'   => false,
				),
			),
			'when'      => 'after_wp_load',
			'longdesc'  => "EXAMPLES:\n\n - wp wpvulnerability core\n - wp wpvulnerability plugins\n - wp wpvulnerability themes",
		)
	);

	/**
	 * Plugin section in WP-CLI command
	 *
	 * @since 2.0.0
	 *
	 * @return void
	 */
	function wpvulnerability_cli_plugins() {

		// Get plugin vulnerabilities
		$plugin_vulnerabilities = wpvulnerability_plugin_get_vulnerabilities();

		// Loop through each plugin vulnerability
		foreach ( $plugin_vulnerabilities as $plugin ) {

			if ( 'true' === $plugin['vulnerable'] ) {

				$name = wp_kses( $plugin_data['Name'], 'strip' );

				// Output the plugin name with red color
				WP_CLI::line( WP_CLI::colorize( "%r$name:%n " ) );

				// Prepare the vulnerabilities array for table format output
				$vulnerabilities = array();
				foreach ( $plugin['vulnerabilities'] as $vulnerability ) {
					$sources = '';

					// Collect all sources for the vulnerability
					foreach ( $vulnerability['source'] as $source ) {
						$sources .= $source['link'] . "\n";
					}

					// Add the vulnerability details to the array
					array_push(
						$vulnerabilities,
						array(
							'name'     => $vulnerability['name'],
							'versions' => $vulnerability['versions'],
							'source'   => $sources,
						)
					);
				}

				// Format and output the vulnerabilities in a table
				WP_CLI\Utils\format_items(
					'table',
					$vulnerabilities,
					array( 'name', 'versions', 'source' )
				);

			}
		}
	}

	/**
	 * Theme section in WP-CLI command
	 *
	 * @since 2.0.0
	 *
	 * @return void
	 */
	function wpvulnerability_cli_themes() {
		// TODO.

		$theme_vulnerabilities = wpvulnerability_theme_get_vulnerabilities();

		WP_CLI::error( 'Command not implemented yet' );

	}

	/**
	 * Core section in WP-CLI command
	 *
	 * @since 2.0.0
	 *
	 * @return void
	 */
	function wpvulnerability_cli_core() {
		// TODO.

		$core_vulnerabilities = wpvulnerability_core_get_vulnerabilities();

		WP_CLI::error( 'Command not implemented yet' );

	}

	/**
	 * Switches the command to show the list of vulnerabilities detected in the site.
	 *
	 * @param array $args The subcommand to execute.
	 * @return void
	 */
	function cli_command( $args ) {
		
		// Selects the correct function to execute based on the subcommand.
		switch ( $args[0] ) {
			case 'core':
				wpvulnerability_cli_core();
				break;
			case 'plugins':
				wpvulnerability_cli_plugins();
				break;
			case 'themes':
				wpvulnerability_cli_themes();
				break;
			default:
				// Displays an error message for an invalid subcommand.
				WP_CLI::error( "'$args[0]' is not a registered subcommand of 'wpvulnerability'.\nAvailable subcommands: core, plugins, themes" );
				break;
		}
	}

}
