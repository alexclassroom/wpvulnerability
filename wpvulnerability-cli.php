<?php
/**
 * CLI functions
 *
 * @package WPVulnerability
 * @version 2.0.0
 */
defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

if ( class_exists( 'WP_CLI' ) ) {
	WP_CLI::add_command(
		'wpvulnerability',
		'cli_command',
		array(
			'shortdesc' => 'Show the list of vulnerabilities detected in your site.',
			'synopsis'  => array(
				array(
					'type'        => 'positional',
					'name'        => 'subcommand',
					'description' => 'subcommand [core|plugins|themes].',
					'optional'    => false,
					'repeating'   => false,
				),
			),
			'when'      => 'after_wp_load',
			'longdesc'  => '## EXAMPLES' . "\n\n" . 'wp wpvulnerability plugins',
		)
	);

	/**
	 * Plugin section
	 */
	function wpvulnerability_cli_plugins() {
		
		$plugin_vulnerabilities = wpvulnerability_plugin_get_vulnerabilities();

		foreach ( $plugin_vulnerabilities as $plugin ) {
			if ( 'true' === $plugin['vulnerable'] ) {
				$name = $plugin['Name'];
				WP_CLI::line( WP_CLI::colorize( "%r$name:%n " ) );
				$vulnerabilities = array();
				foreach ( $plugin['vulnerabilities'] as $vulnerability ) {
					$sources = '';
					foreach ( $vulnerability['source'] as $source ) {
						$sources .= $source['link'] . "\n";
					}
					array_push(
						$vulnerabilities,
						array(
							'name'     => $vulnerability['name'],
							'versions' => $vulnerability['versions'],
							'source'   => $sources,
						)
					);
				}
				WP_CLI\Utils\format_items(
					'table',
					$vulnerabilities,
					array( 'name', 'versions', 'source' )
				);

			}
		}
	}

	/**
	 * Themes section
	 */
	function wpvulnerability_cli_themes() {
		// TODO.

		$theme_vulnerabilities = wpvulnerability_theme_get_vulnerabilities();

		WP_CLI::error( 'Command not implemented yet' );

	}

	function wpvulnerability_cli_core() {
		// TODO.

		$core_vulnerabilities = wpvulnerability_core_get_vulnerabilities();

		WP_CLI::error( 'Command not implemented yet' );

	}

	/**
	 * Switches the command
	 *
	 * @param array $args Type of command.
	 * @return void
	 */
	function cli_command( $args ) {
		switch ( $args[0] ) {
			case 'core':
				wpvulnerability_cli_core();
				break;
			case 'plugins':
				wpvulnerability_cli_plugins();
				break;
			case 'themes':
				wpvulnerability_cli_themes();
				break;
			default:
				WP_CLI::error( "'$args[0]' is not a registered subcommand of 'wpvulnerability'.\nAvailable subcommands: core, plugins, themes" );
				break;
		}
	}
	
	
	
	
	
	
	
	
	
}
