<?php
/**
 * Process functions
 *
 * @package WPVulnerability
 *
 * @version 2.0.0
 */

defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

/**
 * Load the settings to be available always.
 *
 * @version 2.0.0
 *
 * @return array|false An array containing the WPVulnerability settings if they exist, or false if they don't.
 */
if( is_multisite() && is_network_admin() ) {

	$wpvulnerability_settings = get_site_option( 'wpvulnerability-config' );

} elseif ( ! is_multisite() ) {

	$wpvulnerability_settings = get_option( 'wpvulnerability-config' );

}

/**
 * Enqueues the WPVulnerability admin CSS file on all admin pages.
 *
 * @version 2.0.0
 *
 * @return void
 */
function wpvulnerability_admin_enqueue_scripts() {

	// Conditionally enqueue only for network admin pages in multisite
	if ( is_multisite() && ! is_network_admin() ) {
		return;
	}
	wp_enqueue_style(
		'wpvulnerability-admin',
		WPVULNERABILITY_PLUGIN_URL . 'assets/admin.css',
		array(),
		WPVULNERABILITY_PLUGIN_VERSION
	);
}
add_action( 'admin_enqueue_scripts', 'wpvulnerability_admin_enqueue_scripts' );

/**
 * Create the WP-Admin options page
 * This function generates the HTML output for the WPVulnerability settings page in the WP-Admin.
 *
 * @since 2.0.0
 *
 * @return void
 */
function wpvulnerability_create_admin_page() {

	if( is_multisite() && is_network_admin() ) {

		$wpvulnerability_settings = get_site_option( 'wpvulnerability-config' );

	} elseif ( ! is_multisite() ) {

		$wpvulnerability_settings = get_option( 'wpvulnerability-config' );

	}
	?>
	<div class="header-wrap">
		<div class="wrapper">
			<div class="header wpvulnerability-header">
				<div class="logo">
					<img src="<?php echo esc_url( WPVULNERABILITY_PLUGIN_URL ); ?>assets/logo64.png" style="height: 64px; vertical-align: text-top; width: 64px;" alt="" title="WPVulnerability">
					<h2><?php esc_html_e( 'WPVulnerability settings', 'wpvulnerability' ); ?></h2>
				</div>
			</div>
		</div>
	</div>
	<div class="wrap">

<?php
print_r( get_settings_errors() );
?>


		<?php settings_errors( 'wpvulnerability-messages', true ); ?>




		<?php if( is_multisite() && is_network_admin() ) { ?>
		<form method="post" action="<?php echo esc_url( network_admin_url( 'edit.php?action=admin_wpvulnerability_settings' ) ); ?>">
		<?php } elseif ( ! is_multisite() ) { ?>
		<form method="post" action="<?php echo esc_url( admin_url( 'options.php' ) ); ?>">
		<?php } ?>
		<?php
			settings_fields( 'admin_wpvulnerability_settings' );
			do_settings_sections( 'wpvulnerability-config' );
			submit_button();
		?>
		</form>
	</div>
	<?php
}


function wpvulnerability_save_options() {

    // Check if settings have been updated
    if ( isset( $_GET['settings-updated'] ) && $_GET['settings-updated'] ) {

      // Add settings updated message
			add_settings_error(
				'wpvulnerability-messages',
				'wpvulnerability-message',
				__('HOLA Settings Saved', 'wpvulnerability'),
				'success'
			);
    }
    // Display settings errors
    settings_errors('wpvulnerability-messages');

}
add_action('admin_notices', 'wpvulnerability_admin_notices_action');

function wpvulnerability_save_network_options() {

//echo '<pre>ñl kjsdñg lksdjgñlksdjg ñlsdkj gñdlgk jsdñlkaskjhgfaksjhdgfkasjhgfskajhfg sakj sjkh sajfh skjh sjhjkashfdg kjsahf gsakjf hsakj fhgsa fjhsa fkjhsakjash </pre>';


	// Verify the nonce before proceeding; if the nonce is not set, or cannot be verified, the function will exit
	if ( ! isset($_POST['_wpnonce']) || ! wp_verify_nonce( $_POST['_wpnonce'], 'admin_wpvulnerability_settings-options' ) ) {
		wp_die('Security check failed');
	}

	if ( isset( $_POST['wpvulnerability-config'] ) ) {
		update_site_option( 'wpvulnerability-config', $_POST['wpvulnerability-config'] );

		// Register a settings updated message.
		add_settings_error(
			'wpvulnerability-messages',
			'wpvulnerability-message',
			__('Settings Saved', 'wpvulnerability'),
			'success'
		);

//print_r( get_settings_errors() );


		wp_redirect( add_query_arg( array( 'page' => 'wpvulnerability-options', 'settings-updated' => 'true' ), network_admin_url( 'settings.php' ) ) );
		exit;

	}
}
add_action( 'network_admin_edit_admin_wpvulnerability_settings', 'wpvulnerability_save_network_options' );


/**
 * Adds a WP-Admin menu option for the WPVulnerability plugin
 *
 * @since 2.0.0
 *
 * @return void
 */
if ( is_multisite() && is_network_admin() ) {

	function wpvulnerability_admin_menu() {
		// Adds a submenu page under the Settings menu.
		add_submenu_page(
			'settings.php',
			__( 'WPVulnerability', 'wpvulnerability' ),
			__( 'WPVulnerability', 'wpvulnerability' ),
			'manage_network_options',
			'wpvulnerability-options',
			'wpvulnerability_create_admin_page'
		);
	}
	add_action( 'network_admin_menu', 'wpvulnerability_admin_menu' );

} elseif ( ! is_multisite() ) {

	function wpvulnerability_admin_menu() {
		// Adds a submenu page under the Settings menu.
		add_submenu_page(
			'options-general.php',
			__( 'WPVulnerability', 'wpvulnerability' ),
			__( 'WPVulnerability', 'wpvulnerability' ),
			'manage_options',
			'wpvulnerability-options',
			'wpvulnerability_create_admin_page'
		);
	}
	add_action( 'admin_menu', 'wpvulnerability_admin_menu' );

}

/**
 * Print the settings header information for the notifications section.
 *
 * @since 2.0.0
 *
 * @return void
 */
function wpvulnerability_admin_section_notifications() {

	// Output the header information for the notifications section.
	esc_html_e( 'Configure and save these settings to receive email notifications.', 'wpvulnerability' );
}

/**
 * Callback function to display the email input field in the admin settings page.
 * This function retrieves the current WPVulnerability plugin settings and displays the email input field
 * for users to enter their email addresses. If no email is saved in the settings, the admin email is displayed.
 *
 * @since 2.0.0
 *
 * @return void
 */
function wpvulnerability_admin_emails_callback() {

	// Retrieve the WPVulnerability plugin settings.
	if( is_multisite() ) {
		$wpvulnerability_settings = get_site_option( 'wpvulnerability-config' );
	} elseif ( ! is_multisite() ) {
		$wpvulnerability_settings = get_option( 'wpvulnerability-config' );
	}

	// Set a default value for the email input field if no email is saved in the settings.
	if ( ! isset( $wpvulnerability_settings['emails'] ) ) {
		$wpvulnerability_settings['emails'] = '';
	}

	// Output the email input field. Use the network admin email as a placeholder in a multisite environment.
	if( is_multisite() ) {
		$admin_email = get_site_option( 'admin_email' );
	} elseif ( ! is_multisite() ) {
		$admin_email = get_bloginfo( 'admin_email' );
	}

	// Output the email input field and display the admin email as a hint.
	?>
	<input class="regular-text" type="text" name="wpvulnerability-config[emails]" id="wpvulnerability_emails" placeholder="<?php echo esc_attr( $admin_email ); ?>" value="<?php echo esc_attr( $wpvulnerability_settings['emails'] ); ?>">
	<br><small><?php esc_html_e( 'Default administrator email', 'wpvulnerability' ); ?>: <?php echo esc_attr( $admin_email ); ?></small>
	<?php
	
	unset( $admin_email );
	
}

/**
 * Print when to send the vulnerability scan emails.
 *
 * @since 2.0.0
 *
 * @return void
 */
function wpvulnerability_admin_period_callback() {

	// Get the saved plugin settings.
	if( is_multisite() ) {
		$wpvulnerability_settings = get_site_option( 'wpvulnerability-config' );
	} elseif ( ! is_multisite() ) {
		$wpvulnerability_settings = get_option( 'wpvulnerability-config' );
	}

	// Set the default period to 'weekly' if not set or empty.
	if ( ! isset( $wpvulnerability_settings['period'] ) || empty( $wpvulnerability_settings['period'] ) ) {
		$wpvulnerability_settings['period'] = 'weekly';
	}

	// Output the period select box.
	?>
	<select name="wpvulnerability-config[period]" id="wpvulnerability_period">
		<option value="weekly" <?php selected( $wpvulnerability_settings['period'], 'weekly' ); ?>><?php esc_html_e( 'Weekly', 'wpvulnerability' ); ?></option>
		<option value="daily" <?php selected( $wpvulnerability_settings['period'], 'daily' ); ?>><?php esc_html_e( 'Daily', 'wpvulnerability' ); ?></option>
	</select>
	<?php
}

/**
 * Sanitize fields before saving into the database
 *
 * @since 2.0.0
 *
 * @param array $input The input fields to sanitize.
 *
 * @return array The sanitized values.
 */
function wpvulnerability_admin_sanitize( $input ) {

	$sanitized_values = array();
	$input_emails     = array();

	if ( isset( $input['emails'] ) ) {

		$input_email_text = explode( ',', $input['emails'] );

		// Loop through each email address in the input field.
		foreach ( $input_email_text as $input_email ) {

			// Sanitize each email address.
			$input_email = sanitize_email( trim( $input_email ) );

			if ( is_email( $input_email ) ) {
				$input_emails[] = $input_email;
			}
		}
	}

	if ( count( $input_emails ) ) {
		$sanitized_values['emails'] = implode( ',', $input_emails );
	} else {
		$sanitized_values['emails'] = null;
	}

	if ( isset( $input['period'] ) ) {

		// Check the value of the period field and sanitize it.
		switch ( $input['period'] ) {
			case 'daily':
				$sanitized_values['period'] = 'daily';
				break;
			case 'weekly':
			default:
				$sanitized_values['period'] = 'weekly';
				break;
		}
	}

	$current_schedule = wp_get_schedule( 'wpvulnerability_notification' );
	if ( $current_schedule !== $sanitized_values['period'] ) {
		wp_clear_scheduled_hook( 'wpvulnerability_notification' );
		wp_schedule_event( time(), $sanitized_values['period'], 'wpvulnerability_notification' );
	}
	unset( $current_schedule );

	return $sanitized_values;
}

/**
 * Content for the Dashboard Widget
 *
 * @since 2.2.0
 *
 * @return void
 */
function wpvulnerability_admin_dashboard_content() {
	// Get the number of core vulnerabilites from cache.
	if( is_multisite() && is_network_admin() ) {
		$wpvulnerability_test_core_counter = json_decode( get_site_option( 'wpvulnerability-core-vulnerable' ) );
	} elseif ( ! is_multisite() ) {
		$wpvulnerability_test_core_counter = json_decode( get_option( 'wpvulnerability-core-vulnerable' ) );
	}
	if ( ! is_numeric( $wpvulnerability_test_core_counter ) ) {
		$wpvulnerability_test_core_counter = 0;
	}
	/* translators: Show the number of vulnerabilities in a WP-Admin dashboard */
	$msg_core = sprintf( _n( 'Core: %d vulnerability', 'Core: %d vulnerabilities', $wpvulnerability_test_core_counter, 'wpvulnerability' ), $wpvulnerability_test_core_counter );

	// Get the number of themes vulnerabilites from cache.
	if( is_multisite() && is_network_admin() ) {
		$wpvulnerability_test_themes_counter = json_decode( get_site_option( 'wpvulnerability-themes-vulnerable' ) );
	} elseif ( ! is_multisite() ) {
		$wpvulnerability_test_themes_counter = json_decode( get_option( 'wpvulnerability-themes-vulnerable' ) );
	}
	if ( ! is_numeric( $wpvulnerability_test_themes_counter ) ) {
		$wpvulnerability_test_themes_counter = 0;
	}
	/* translators: Show the number of vulnerabilities in a WP-Admin dashboard */
	$msg_themes = sprintf( _n( 'Themes: %d vulnerability', 'Themes: %d vulnerabilities', $wpvulnerability_test_themes_counter, 'wpvulnerability' ), $wpvulnerability_test_themes_counter );

	// Get the number of plugins vulnerabilites from cache.
	if( is_multisite() && is_network_admin() ) {
		$wpvulnerability_test_plugins_counter = json_decode( get_site_option( 'wpvulnerability-plugins-vulnerable' ) );
	} elseif ( ! is_multisite() ) {
		$wpvulnerability_test_plugins_counter = json_decode( get_option( 'wpvulnerability-plugins-vulnerable' ) );
	}
	if ( ! is_numeric( $wpvulnerability_test_plugins_counter ) ) {
		$wpvulnerability_test_plugins_counter = 0;
	}
	/* translators: Show the number of vulnerabilities in a WP-Admin dashboard */
	$msg_plugins = sprintf( _n( 'Plugins: %d vulnerability', 'Plugins: %d vulnerabilities', $wpvulnerability_test_plugins_counter, 'wpvulnerability' ), $wpvulnerability_test_plugins_counter );

	// Show the widget.
	echo esc_html( __( 'Vulnerability analysis of your WordPress installation:', 'wpvulnerability' ) );
	echo '<ul>';

	if ( ! $wpvulnerability_test_core_counter ) {
		echo '<li>✔️ <span class="dashicons dashicons-wordpress"></span> ' . esc_html( $msg_core ) . '</li>';
	} else {
		echo '<li>❌ <span class="dashicons dashicons-wordpress"></span> ' . esc_html( $msg_core ) . '</li>';
	}

	if ( ! $wpvulnerability_test_plugins_counter ) {
		echo '<li>✔️ <span class="dashicons dashicons-admin-plugins"></span> ' . esc_html( $msg_plugins ) . '</li>';
	} else {
		echo '<li>❌ <span class="dashicons dashicons-admin-plugins"></span> ' . esc_html( $msg_plugins );
		echo wpvulnerability_list_plugins(); // phpcs:ignore
		echo '</li>';
	}

	if ( ! $wpvulnerability_test_themes_counter ) {
		echo '<li>✔️ <span class="dashicons dashicons-admin-appearance"></span> ' . esc_html( $msg_themes ) . '</li>';
	} else {
		echo '<li>❌ <span class="dashicons dashicons-admin-appearance"></span> ' . esc_html( $msg_themes );
		echo wpvulnerability_list_themes(); // phpcs:ignore
		echo '</li>';
	}

	echo '</ul>';
	echo esc_html( __( 'More information? Visit', 'wpvulnerability' ) ) . ' <a href="' . esc_url( get_admin_url( null, 'site-health.php' ) ) . '">' . esc_html( __( 'Site Health' ) ) . '</a>';

	unset( $wpvulnerability_test_core_counter, $wpvulnerability_test_themes_counter, $wpvulnerability_test_plugins_counter );
}

/**
 * Created a widget in the WordPress dashboard with vulnerability info.
 *
 * @since 2.2.0
 *
 * @return void
 */
if( is_multisite() && is_network_admin() ) {

	function wpvulnerability_admin_dashboard() {
		wp_add_dashboard_widget( 'wpvulnerability', __( 'WPVulnerability Status', 'wpvulnerability' ), 'wpvulnerability_admin_dashboard_content',  null, null, 'side', 'high' );
	}
	add_action( 'wp_network_dashboard_setup', 'wpvulnerability_admin_dashboard' );

} elseif ( ! is_multisite() ) {

	function wpvulnerability_admin_dashboard() {
		wp_add_dashboard_widget( 'wpvulnerability', __( 'WPVulnerability Status', 'wpvulnerability' ), 'wpvulnerability_admin_dashboard_content',  null, null, 'side', 'high' );
	}
	add_action( 'wp_dashboard_setup', 'wpvulnerability_admin_dashboard' );

}

/**
 * Initializes the WP-Admin settings page for the WP Vulnerability plugin
 *
 * @since 2.0.0
 *
 * @return void
 */
function wpvulnerability_admin_init() {

	// Register the plugin settings to be saved in the database.
	register_setting(
		'admin_wpvulnerability_settings',
		'wpvulnerability-config',
		'wpvulnerability_admin_sanitize'
	);

	// Add a section to the settings page.
	add_settings_section(
		'admin_wpvulnerability_settings',
		__( 'Receive notifications in your email', 'wpvulnerability' ),
		'wpvulnerability_admin_section_notifications',
		'wpvulnerability-config'
	);

	// Add a field to the settings page for the email addresses.
	add_settings_field(
		'wpvulnerability_emails',
		__( 'eMail addresses to notify (separated by commas)', 'wpvulnerability' ),
		'wpvulnerability_admin_emails_callback',
		'wpvulnerability-config',
		'admin_wpvulnerability_settings'
	);

	// Add a field to the settings page for the notification period.
	add_settings_field(
		'wpvulnerability_period',
		__( 'How often you want to receive notifications', 'wpvulnerability' ),
		'wpvulnerability_admin_period_callback',
		'wpvulnerability-config',
		'admin_wpvulnerability_settings'
	);
}
add_action( 'admin_init', 'wpvulnerability_admin_init' );
