<?php
/**
 * Process functions
 *
 * @package WPVulnerability
 * @version 2.0.0
 */
defined( 'ABSPATH' ) || die( 'No script kiddies please!' );


/**
 * Load the settings to be available always.
 *
 */

$wpvulnerability_settings = get_option( 'wpvulnerability-config' );

/*
echo '<pre>';
print_r($wpvulnerability_settings);
echo '</pre>';
exit;
*/


/**
 * Add WP-Admin scripts
 *
 * @return void
 */
function wpvulnerability_admin_enqueue_scripts() {

	wp_enqueue_style(
		'wpvulnerability-admin',
		WPVULNERABILITY_PLUGIN_URL . 'assets/admin.css',
		array(),
		WPVULNERABILITY_PLUGIN_VERSION
	);

}
add_action( 'admin_enqueue_scripts', 'wpvulnerability_admin_enqueue_scripts' );

/**
 * Create the WP-Admin options page
 *
 * @return void
 */
function wpvulnerability_create_admin_page() {
	global $wpvulnerability_settings;

?>
	<div class="header-wrap">
		<div class="wrapper">
			<div class="header wpvulnerability-header">
				<div class="logo">
					<img src="<?php echo esc_url( WPVULNERABILITY_PLUGIN_URL ); ?>assets/logo64.png" style="height: 64px; vertical-align: text-top; width: 64px;" alt="" title="WPVulnerability">
					<h2><?php esc_html_e( 'WPVulnerability settings', 'wpvulnerability' ); ?></h2>
				</div>
			</div>
		</div>
	</div>

	<div class="wrap">
		<?php settings_errors(); ?>
		<form method="post" action="options.php">
			<?php
				settings_fields( 'admin_wpvulnerability_settings' );
				do_settings_sections( 'wpvulnerability-config' );
				submit_button();
			?>
		</form>
	</div>

<?php
}

/**
 * Adds WP-Admin menu opcion for the plugin
 *
 * @return void
 */
function wpvulnerability_admin_menu() {

	add_submenu_page(
		'options-general.php',
		__( 'WPVulnerability', 'wpvulnerability' ),
		__( 'WPVulnerability', 'wpvulnerability' ),
		'manage_options',
		'wpvulnerability-options',
		'wpvulnerability_create_admin_page'
	);

}
add_action( 'admin_menu', 'wpvulnerability_admin_menu' );

/**
 * Adds WP-Admin notices
 *
 * @return void
 */
/*
function wpvulnerability_admin_notices() {

	settings_errors( 'wpvulnerability_notification_error' );

}
add_action( 'admin_notices', 'wpvulnerability_admin_notices' );
*/

/**
 * Print settings header info
 *
 * @return void
 */
function wpvulnerability_admin_section_notifications() {

	esc_html_e( 'Configure and save these settings to receive email notifications.', 'wpvulnerability' );

}

/**
 * Print emain settings
 *
 * @return void
 */
function wpvulnerability_admin_emails_callback() {
	global $wpvulnerability_settings;

	if ( !isset( $wpvulnerability_settings['emails'] ) ) {
		$wpvulnerability_settings['emails'] = '';
	}

?>
	<input class="regular-text" type="text" name="wpvulnerability-config[emails]" id="wpvulnerability_emails" value="<?php echo esc_attr( $wpvulnerability_settings['emails'] ); ?>">
	<br><small><?php echo get_bloginfo( 'admin_email' ); ?></small>
<?php
}

/**
 * Print when to send the emails
 *
 * @return void
 */
function wpvulnerability_admin_period_callback() {
	global $wpvulnerability_settings;

	if ( !isset( $wpvulnerability_settings['period'] ) || empty( $wpvulnerability_settings['period'] ) ) {
		$wpvulnerability_settings['period'] = 'weekly';
	}

?>
	<select name="wpvulnerability-config[period]" id="wpvulnerability_period">
		<option value="weekly" <?php selected( $wpvulnerability_settings['period'], 'weekly' ); ?>><?php esc_html_e( 'Weekly', 'wpvulnerability' ); ?></option>
		<option value="daily" <?php selected( $wpvulnerability_settings['period'], 'daily' ); ?>><?php esc_html_e( 'Daily', 'wpvulnerability' ); ?></option>
	</select>
<?php
}

/**
 * Sanitize fields before saving into the database
 *
 * @param array $input Input field.
 * @return array
 */
function wpvulnerability_admin_sanitize( $input ) {

	$sanitary_values = array();
	$input_emails = array();

	if ( isset( $input['emails'] ) ) {

		$input_email_text = explode( ',', $input['emails'] );

		foreach( $input_email_text as $input_email ) {

			$input_email = sanitize_email( trim( $input_email ) );

			if( $input_email ) {
				$input_emails[] = $input_email;
			}

		}

	}

	if( count( $input_emails ) ) {
		$sanitary_values['emails'] = implode( ',', $input_emails );
	} else {
		$sanitary_values['emails'] = null;
	}

	if ( isset( $input['period'] ) ) {

		switch( $input['period'] ) {
			case 'daily':
				$sanitary_values['period'] = 'daily';
				break;
			case 'weekly':
			default:
				$sanitary_values['period'] = 'weekly';
				break;
		}

	}

	wp_clear_scheduled_hook( 'wpvulnerability_notification' );
	wp_schedule_event( time(), $sanitary_values['period'], 'wpvulnerability_notification' );

	return $sanitary_values;
}

/**
 * WP-Admin settings page
 *
 * @return void
 */
function wpvulnerability_admin_init() {

	register_setting(
		'admin_wpvulnerability_settings',
		'wpvulnerability-config',
		'wpvulnerability_admin_sanitize'
	);

	add_settings_section(
		'admin_wpvulnerability_settings',
		__( 'Receive notifications in your email', 'wpvulnerability' ),
		'wpvulnerability_admin_section_notifications',
		'wpvulnerability-config'
	);

	add_settings_field(
		'wpvulnerability_emails',
		__( 'eMail addresses to notify (separated by commas)', 'wpvulnerability' ),
		'wpvulnerability_admin_emails_callback',
		'wpvulnerability-config',
		'admin_wpvulnerability_settings'
	);

	add_settings_field(
		'wpvulnerability_period',
		__( 'How often you want to receive notifications', 'wpvulnerability' ),
		'wpvulnerability_admin_period_callback',
		'wpvulnerability-config',
		'admin_wpvulnerability_settings'
	);

}
add_action( 'admin_init', 'wpvulnerability_admin_init' );
