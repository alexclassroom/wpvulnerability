<?php
/**
 * WPVulnerability REST API Endpoints
 *
 * @package WPVulnerability
 *
 * @since 3.3.0
 */

/**
 * Handle the core vulnerabilities REST API request.
 *
 * This function handles the request for retrieving core vulnerabilities.
 * It includes the necessary file and fetches the vulnerabilities data.
 *
 * @since 3.3.0
 *
 * @return WP_REST_Response Core vulnerabilities data or a message if none found.
 */
function wpvulnerability_rest_core_vulnerabilities() {

	// Include the file containing the function to get core vulnerabilities.
	require_once WPVULNERABILITY_PLUGIN_PATH . '/wpvulnerability-core.php';

	// Get the core vulnerabilities.
	$core_vulnerabilities = wpvulnerability_core_get_vulnerabilities();

	// Check if vulnerabilities are found.
	if ( empty( $core_vulnerabilities ) ) {
		return new WP_REST_Response( array( 'message' => 'No vulnerabilities found.' ), 404 );
	}

	// Return the vulnerabilities in the response.
	return new WP_REST_Response( $core_vulnerabilities, 200 );
}

/**
 * Handle the plugins vulnerabilities REST API request.
 *
 * This function handles the request for retrieving plugins vulnerabilities.
 * It includes the necessary file and fetches the vulnerabilities data.
 *
 * @since 3.3.0
 *
 * @return WP_REST_Response Plugins vulnerabilities data or a message if none found.
 */
function wpvulnerability_rest_plugins_vulnerabilities() {

	// Include the file containing the function to get plugins vulnerabilities.
	require_once WPVULNERABILITY_PLUGIN_PATH . '/wpvulnerability-plugins.php';

	// Get the plugins vulnerabilities.
	$plugins_vulnerabilities = wpvulnerability_plugin_get_vulnerabilities();

	// Check if vulnerabilities are found.
	if ( empty( $plugins_vulnerabilities ) ) {
		return new WP_REST_Response( array( 'message' => 'No vulnerabilities found.' ), 404 );
	}

	// Return the vulnerabilities in the response.
	return new WP_REST_Response( $plugins_vulnerabilities, 200 );
}

/**
 * Handle the themes vulnerabilities REST API request.
 *
 * This function handles the request for retrieving themes vulnerabilities.
 * It includes the necessary file and fetches the vulnerabilities data.
 *
 * @since 3.3.0
 *
 * @return WP_REST_Response Themes vulnerabilities data or a message if none found.
 */
function wpvulnerability_rest_themes_vulnerabilities() {

	// Include the file containing the function to get themes vulnerabilities.
	require_once WPVULNERABILITY_PLUGIN_PATH . '/wpvulnerability-themes.php';

	// Get the themes vulnerabilities.
	$themes_vulnerabilities = wpvulnerability_theme_get_vulnerabilities();

	// Check if vulnerabilities are found.
	if ( empty( $themes_vulnerabilities ) ) {
		return new WP_REST_Response( array( 'message' => 'No vulnerabilities found.' ), 404 );
	}

	// Return the vulnerabilities in the response.
	return new WP_REST_Response( $themes_vulnerabilities, 200 );
}

/**
 * Handle the PHP vulnerabilities REST API request.
 *
 * This function handles the request for retrieving PHP vulnerabilities.
 * It includes the necessary file and fetches the vulnerabilities data.
 *
 * @since 3.3.0
 *
 * @return WP_REST_Response PHP vulnerabilities data or a message if none found.
 */
function wpvulnerability_rest_php_vulnerabilities() {

	// Include the file containing the function to get PHP vulnerabilities.
	require_once WPVULNERABILITY_PLUGIN_PATH . '/wpvulnerability-php.php';

	// Get the PHP vulnerabilities.
	$php_vulnerabilities = wpvulnerability_php_get_vulnerabilities();

	// Check if vulnerabilities are found.
	if ( empty( $php_vulnerabilities ) ) {
		return new WP_REST_Response( array( 'message' => 'No vulnerabilities found.' ), 404 );
	}

	// Return the vulnerabilities in the response.
	return new WP_REST_Response( $php_vulnerabilities, 200 );
}

/**
 * Handle the Apache vulnerabilities REST API request.
 *
 * This function handles the request for retrieving Apache vulnerabilities.
 * It includes the necessary file and fetches the vulnerabilities data.
 *
 * @since 3.3.0
 *
 * @return WP_REST_Response Apache vulnerabilities data or a message if none found.
 */
function wpvulnerability_rest_apache_vulnerabilities() {

	// Include the file containing the function to get Apache vulnerabilities.
	require_once WPVULNERABILITY_PLUGIN_PATH . '/wpvulnerability-apache.php';

	// Get the Apache vulnerabilities.
	$apache_vulnerabilities = wpvulnerability_apache_get_vulnerabilities();

	// Check if vulnerabilities are found.
	if ( empty( $apache_vulnerabilities ) ) {
		return new WP_REST_Response( array( 'message' => 'No vulnerabilities found.' ), 404 );
	}

	// Return the vulnerabilities in the response.
	return new WP_REST_Response( $apache_vulnerabilities, 200 );
}

/**
 * Handle the nginx vulnerabilities REST API request.
 *
 * This function handles the request for retrieving nginx vulnerabilities.
 * It includes the necessary file and fetches the vulnerabilities data.
 *
 * @since 3.3.0
 *
 * @return WP_REST_Response Nginx vulnerabilities data or a message if none found.
 */
function wpvulnerability_rest_nginx_vulnerabilities() {

	// Include the file containing the function to get nginx vulnerabilities.
	require_once WPVULNERABILITY_PLUGIN_PATH . '/wpvulnerability-nginx.php';

	// Get the nginx vulnerabilities.
	$nginx_vulnerabilities = wpvulnerability_nginx_get_vulnerabilities();

	// Check if vulnerabilities are found.
	if ( empty( $nginx_vulnerabilities ) ) {
		return new WP_REST_Response( array( 'message' => 'No vulnerabilities found.' ), 404 );
	}

	// Return the vulnerabilities in the response.
	return new WP_REST_Response( $nginx_vulnerabilities, 200 );
}

/**
 * Custom permission check for the WPVulnerability REST API.
 *
 * This function checks if the request is authenticated using an Application Password.
 *
 * @since 3.3.0
 *
 * @param WP_REST_Request $request The REST API request.
 *
 * @return bool True if the user has permission, false otherwise.
 */
function wpvulnerability_permission_check( WP_REST_Request $request ) {

	// Check if application passwords are available.
	if ( wp_is_application_passwords_available() ) {
		$authorization_header = $request->get_header( 'authorization' );

		// Check if the authorization header is present and properly formatted.
		if ( $authorization_header && preg_match( '/^Basic\s(.+)$/i', $authorization_header, $matches ) ) {
			$auth_string             = base64_decode( $matches[1] );
			list( $user, $password ) = explode( ':', $auth_string );

			// Authenticate the user using the application password.
			if ( wp_authenticate_application_password( null, $user, $password ) instanceof WP_User ) {
				return true;
			}
		}
	}

	return false;
}

/**
 * Register REST API routes.
 *
 * This function sets up the REST API routes for WPVulnerability.
 *
 * @since 3.3.0
 *
 * @return void
 */
function wpvulnerability_register_rest_routes() {

	// Define the endpoints to be registered.
	$endpoints = array(
		'core',
		'plugins',
		'themes',
		'php',
		'apache',
		'nginx',
	);

	// Loop through each endpoint and register it.
	foreach ( $endpoints as $endpoint ) {
		register_rest_route(
			'wpvulnerability/v1',            // Namespace and version.
			'/' . $endpoint,                 // Endpoint URL.
			array(
				'methods'             => 'GET',  // HTTP method.
				'callback'            => 'wpvulnerability_rest_' . $endpoint . '_vulnerabilities',  // Callback function.
				'permission_callback' => 'wpvulnerability_permission_check',  // Permission check callback.
			)
		);
	}
}

// Hook to initialize REST API endpoints.
add_action( 'rest_api_init', 'wpvulnerability_register_rest_routes' );
