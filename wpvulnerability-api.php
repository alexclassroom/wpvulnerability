<?php
/**
 * REST-API functions
 *
 * @package WPVulnerability
 *
 * @version 3.3.0
 */

defined( 'ABSPATH' ) || die( 'No script kiddies please!' );

function wpvulnerability_register_rest_endpoints() {
    $endpoints = array(
        'core',
        'plugins',
        'themes',
        'php',
        'apache',
        'nginx'
    );

    foreach ( $endpoints as $endpoint ) {
        register_rest_route( 'wpvulnerability/v1', '/' . $endpoint, array(
            'methods'  => 'GET',
            'callback' => 'wpvulnerability_get_vulnerabilities_' . $endpoint,
            'permission_callback' => 'wpvulnerability_permission_check',
        ) );
    }
}

function wpvulnerability_permission_check( WP_REST_Request $request ) {
    // Check if the user is logged in
    if ( is_user_logged_in() ) {
        return current_user_can( 'read' );
    }

    // Check if the request is authenticated using an Application Password
    if ( wp_is_application_passwords_available() ) {
        $authorization_header = $request->get_header( 'authorization' );
        if ( $authorization_header && preg_match( '/^Basic\s(.+)$/i', $authorization_header, $matches ) ) {
            $auth_string = base64_decode( $matches[1] );
            list( $user, $password ) = explode( ':', $auth_string );

            if ( wp_authenticate_application_password( null, $user, $password ) instanceof WP_User ) {
                return true;
            }
        }
    }

    return false;
}

// Ejemplos de funciones de callback para obtener vulnerabilidades de distintos tipos.
function wpvulnerability_get_vulnerabilities_core( WP_REST_Request $request ) {
    return wpvulnerability_get_vulnerabilities_by_type( 'core' );
}

function wpvulnerability_get_vulnerabilities_plugins( WP_REST_Request $request ) {
    return wpvulnerability_get_vulnerabilities_by_type( 'plugins' );
}

function wpvulnerability_get_vulnerabilities_themes( WP_REST_Request $request ) {
    return wpvulnerability_get_vulnerabilities_by_type( 'themes' );
}

function wpvulnerability_get_vulnerabilities_php( WP_REST_Request $request ) {
    return wpvulnerability_get_vulnerabilities_by_type( 'php' );
}

function wpvulnerability_get_vulnerabilities_apache( WP_REST_Request $request ) {
    return wpvulnerability_get_vulnerabilities_by_type( 'apache' );
}

function wpvulnerability_get_vulnerabilities_nginx( WP_REST_Request $request ) {
    return wpvulnerability_get_vulnerabilities_by_type( 'nginx' );
}

// FunciÃ³n general para obtener vulnerabilidades por tipo.
function wpvulnerability_get_vulnerabilities_by_type( $type ) {

	$results = array( 'hola' => 'adios' );

	if ( empty( $results ) ) {
		return new WP_REST_Response( array( 'message' => 'No vulnerabilities found' ), 404 );
	}

	return new WP_REST_Response( $results, 200 );
}

// Hook para registrar los endpoints cuando se inicializa la REST API.
add_action( 'rest_api_init', 'wpvulnerability_register_rest_endpoints' );
