<?php
/**
 * Themes functions
 *
 * @package WPVulnerability
 * @version 2.0.0
 */
defined( 'ABSPATH' ) || die( 'No script kiddies please!' );


/**
 * After Row Text
 * callback function for adding vulnerability notice under vulnerable themes
 *
 * @param  string $theme_file main theme folder/file_name.
 * @param  array  $theme_data theme data.
 * @param  array  $status Status.
 * @return void
 */

function wpvulnerability_theme_info_after( $theme_file, $theme_data, $status ) {

	$theme_vulnerabilities = json_decode( get_option( 'wpvulnerability-themes' ), true );
	
	/*
	echo '<pre>';
	print_r($theme_vulnerabilities);
	echo '</pre>';
	exit;
	*/

	$tr_class = '';
	if ( is_theme_active( $theme_file ) ) {
		$tr_class .= 'active';
	}

	$message = sprintf(
		/* translators: 1: theme name */
		__( '%1$s has a known vulnerability that may be affecting this version.', 'wpvulnerability' ),
		wp_kses( $theme_data['Name'], 'strip' )
	);

	$information  = '<tr class="wpvulnerability ' . $tr_class . '">';
	$information .= '<td colspan="4">';
	$information .= '<p class="text-red"><img src="' . esc_url( WPVULNERABILITY_PLUGIN_URL ) . 'assets/logo16.png" style="height: 16px; vertical-align: text-top; width: 16px;" alt="" title="WPVulnerability"> <strong>' . $message . '</strong>';
	$information .= '</p>';
	$information .= '<table>';

	$vulnerabilities = $theme_vulnerabilities[ $theme_file ]['vulnerabilities'];

	/*
	echo '<pre>';
	print_r($vulnerabilities);
	echo '</pre>';
	exit;
	*/

	foreach ( $vulnerabilities as $vulnerability ) {

		$what = array();
		if( isset( $vulnerability['impact']['cwe'] ) ) {
			foreach( $vulnerability['impact']['cwe'] as $vulnerability_cwe ) {
				$what[] = '<div><b>' . wp_kses( $vulnerability_cwe['name'], 'strip' ) . '</b></div><div><i>' . wp_kses_post( $vulnerability_cwe['description'] ) . '</i></div>';
			}
		}

		$sources = array();
		if( isset( $vulnerability['source'] ) ) {
			foreach( $vulnerability['source'] as $vulnerability_source ) {
				$sources[] = '<a href="' . sanitize_url( $vulnerability_source['link'], 'strip') . '" target="_blank" rel="external nofollow noopener noreferrer">[+]</a>&nbsp;' . wp_kses( $vulnerability_source['name'], 'strip' );
			}
		}
		if( count( $sources ) ) {
			$source = '<div style="padding-bottom: 5px;">' . implode( '<br>', $sources ) . '</div>';
		}

		$score = null;
		if( isset( $vulnerability['impact']['cvss']['score'] ) ) {
			$score = number_format( (float) $vulnerability['impact']['cvss']['score'], 1, '.', '' );
		}
		$severity = null;
		if( isset( $vulnerability['impact']['cvss']['severity'] ) ) {
			$severity = wpvulnerability_severity( $vulnerability['impact']['cvss']['severity'] );
		}
		$exploitable = null;
		if( isset( $vulnerability['impact']['cvss']['exploitable'] ) ) {
			$exploitable = number_format( (float) $vulnerability['impact']['cvss']['exploitable'], 1, '.', '' );
		}

		$information .= '<tr>';
		$information .= '<td style="max-width: 256px; min-width: 96px;"><b>' . wp_kses( $vulnerability['versions'], 'strip' ) . '</b></td>';
		$information .= '<td>';
		if( (int)$vulnerability['closed'] || (int)$vulnerability['unfixed'] ) {
			$information .= '<div style="padding-bottom: 5px;">';
			if( (int)$vulnerability['closed'] ) {
				$information .= '<div class="text-red">' . __( 'This theme is closed. Please replace it with another.', 'wpvulnerability' ) . '</div>';
			}
			if( (int)$vulnerability['unfixed'] ) {
				$information .= '<div class="text-red">' . __( 'This vulnerability appears to be unpatched. Stay tuned for upcoming theme updates.', 'wpvulnerability' ) . '</div>';
			}
			$information .= '</div>';
		}
		if( count( $what ) ) {
			$information .= '<div style="padding-bottom: 5px;">';
			foreach( $what as $w ) {
				$information .= $w;
			}
			$information .= '</div>';
		}
		if( !is_null( $score ) || !is_null( $severity ) || !is_null( $exploitable ) ) {
			$information .= '<div style="padding-bottom: 5px;">';
			if( !is_null( $score ) ) {
				$information .= '<div>' . __( 'Global score: ', 'wpvulnerability' ) . $score . ' / 10</div>';
			}
			if( !is_null( $severity ) ) {
				$information .= '<div>' . __( 'Severity: ', 'wpvulnerability' ) . $severity . '</div>';
			}
			if( !is_null( $exploitable ) ) {
				$information .= '<div>' . __( 'Exploitability: ', 'wpvulnerability' ) . $exploitable . ' / 10</div>';
			}
			$information .= '</div>';
		}
		$information .= wp_kses( $source, 'post' );
		$information .= '</td>';
		$information .= '</tr>';

	}

	$information .= '</table>';
	$information .= '</td>';
	$information .= '</tr>';

	echo $information; // phpcs:ignore
}

/**
 * Get Fresh theme Vulnerabilities
 * pull vulnerabilities through API, compare version to vulnerabilities, add is_know_vulnerable key
 *
 * @param  array  $theme_data theme data.
 * @param  string $file_path theme file path.
 * @return array  updated theme
 */
function get_fresh_theme_vulnerabilities( $theme_data, $file_path ) {

	if( empty( $theme_data['TextDomain'] ) ) {
		
		$folder_name = explode( '/', $file_path );
		
		if( isset( $folder_name[0] ) ) {
			$theme_data['TextDomain'] = wp_kses( $folder_name[0], 'strip' );
		}

	}

	$theme_slug = wp_kses( $theme_data['TextDomain'], 'strip' );
	$theme_version = wp_kses( $theme_data['Version'], 'strip' );
	$theme_data['vulnerabilities'] = null;
	$theme_data['vulnerable'] = 0;

	if( $theme_slug ) {

		$theme_api_response = wpvulnerability_get_theme( $theme_slug, $theme_version );

		if ( !empty( $theme_api_response ) ) {

			$theme_data['vulnerabilities'] = $theme_api_response;
			$theme_data['vulnerable'] = 1;

		}

	}

	return $theme_data;
}



/**
 * Get Installed themes
 * gets the installed themes, checks for vulnerabilities in them, caches the data, sends email if vulnerabilities detected
 *
 * @return array
 */

function wpvulnerability_theme_get_installed() {

	$themes = wp_get_themes();

	foreach ( $themes as $slug => $theme_data ) {

	echo '<pre>';
	print_r($slug);
	echo '</pre>';
	echo '<pre>';
	print_r($theme_data);
	echo '</pre>';
	exit;



		$themes[$slug] = get_fresh_theme_vulnerabilities( $theme_data, $slug );

	}

	update_option( 'wpvulnerability-themes', wp_json_encode( $themes ) );
	update_option( 'wpvulnerability-themes-cache', wp_json_encode( number_format( time() + ( 3600 * WPVULNERABILITY_CACHE_HOURS ), 0, '.', '' ) ) );

	return wp_json_encode( $themes );
}


/**
 * Get Installed themes cache
 *
 * @return array
 */
 
function wpvulnerability_theme_get_vulnerabilities( ) {

	$theme_data_cache = json_decode( get_option( 'wpvulnerability-themes-cache' ) );
	$theme_data = json_decode( get_option( 'wpvulnerability-themes' ), true );

	if( $theme_data_cache < time() || empty( $theme_data ) ) {

		$theme_data = json_decode( wpvulnerability_theme_get_installed( ), true );

	}

	return $theme_data;

}

/**
 * Get Installed themes cache
 *
 * @return array
 */
function wpvulnerability_theme_get_vulnerabilities_clean( ) {

	wpvulnerability_theme_get_installed( );

}


/**
 * Admin Head
 * gets installed themes cache, adds after row text and notices based on the results for the theme page
 *
 * @return void
 */
function wpvulnerability_theme_page() {
	global $pagenow;
	if( 'themes.php' == $pagenow ) {

		$themes = wpvulnerability_theme_get_vulnerabilities();


		exit;
	

		foreach ( $themes as $file_path => $theme_data ) {

			if ( isset( $theme_data['vulnerable'] ) && 1 === $theme_data['vulnerable'] ) {

				add_action( 'after_theme_row_' . $file_path, 'wpvulnerability_theme_info_after', 10, 3 );

			}

		}

	}
}
add_action( 'admin_head', 'wpvulnerability_theme_page' );

add_action( 'upgrader_process_complete', 'wpvulnerability_theme_get_vulnerabilities_clean' , 10, 2 );
